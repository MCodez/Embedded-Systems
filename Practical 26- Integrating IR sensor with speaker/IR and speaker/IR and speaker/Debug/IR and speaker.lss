
IR and speaker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001b6  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015c  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d1  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000151  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000055  00000000  00000000  00000ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
#include <util/delay.h>


void ADC_init(void)
{
	ADMUX=(1<<REFS0);
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  70:	87 e8       	ldi	r24, 0x87	; 135
  72:	86 b9       	out	0x06, r24	; 6
  74:	08 95       	ret

00000076 <ADC_read>:
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
	ADMUX|=ch;
  76:	97 b1       	in	r25, 0x07	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
  78:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
  7a:	98 2b       	or	r25, r24
  7c:	97 b9       	out	0x07, r25	; 7
	ADCSRA|=(1<<ADSC);
  7e:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)));
  80:	34 9b       	sbis	0x06, 4	; 6
  82:	fe cf       	rjmp	.-4      	; 0x80 <ADC_read+0xa>
	ADCSRA|=(1<<ADIF);
  84:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
  86:	24 b1       	in	r18, 0x04	; 4
  88:	35 b1       	in	r19, 0x05	; 5
}
  8a:	82 2f       	mov	r24, r18
  8c:	93 2f       	mov	r25, r19
  8e:	08 95       	ret

00000090 <timer0_CTC>:

void timer0_CTC()
{
	TCCR0|=(1<<WGM01)|(1<<COM00)|(1<<CS01);
  90:	83 b7       	in	r24, 0x33	; 51
  92:	8a 61       	ori	r24, 0x1A	; 26
  94:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);
  96:	bb 9a       	sbi	0x17, 3	; 23
  98:	08 95       	ret

0000009a <main>:
}


int main(void)
{
	DDRA=0x00;
  9a:	1a ba       	out	0x1a, r1	; 26
	ADC_init();
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	timer0_CTC();
  a0:	0e 94 48 00 	call	0x90	; 0x90 <timer0_CTC>
		else if(a>=152 && a<418)
		OCR0=50*7;
		else if(a>=418 && a<950)
		OCR0=50*9;
		else if(a>=950)
		OCR0=55*5;
  a4:	0f 2e       	mov	r0, r31
  a6:	f3 e1       	ldi	r31, 0x13	; 19
  a8:	ef 2e       	mov	r14, r31
  aa:	f0 2d       	mov	r31, r0
		else if(a>=120 && a<152)
		OCR0=50*5;
		else if(a>=152 && a<418)
		OCR0=50*7;
		else if(a>=418 && a<950)
		OCR0=50*9;
  ac:	0f 2e       	mov	r0, r31
  ae:	f2 ec       	ldi	r31, 0xC2	; 194
  b0:	ff 2e       	mov	r15, r31
  b2:	f0 2d       	mov	r31, r0
		else if(a>=85 && a<120)
		OCR0=50*3;
		else if(a>=120 && a<152)
		OCR0=50*5;
		else if(a>=152 && a<418)
		OCR0=50*7;
  b4:	0e e5       	ldi	r16, 0x5E	; 94
		if(a>=60 && a<85)
		OCR0=50*1;
		else if(a>=85 && a<120)
		OCR0=50*3;
		else if(a>=120 && a<152)
		OCR0=50*5;
  b6:	1a ef       	ldi	r17, 0xFA	; 250
	{
		a=ADC_read('0');
		if(a>=60 && a<85)
		OCR0=50*1;
		else if(a>=85 && a<120)
		OCR0=50*3;
  b8:	d6 e9       	ldi	r29, 0x96	; 150
	unsigned int a;
	while(1)
	{
		a=ADC_read('0');
		if(a>=60 && a<85)
		OCR0=50*1;
  ba:	c2 e3       	ldi	r28, 0x32	; 50
	ADC_init();
	timer0_CTC();
	unsigned int a;
	while(1)
	{
		a=ADC_read('0');
  bc:	80 e3       	ldi	r24, 0x30	; 48
  be:	0e 94 3b 00 	call	0x76	; 0x76 <ADC_read>
		if(a>=60 && a<85)
  c2:	9c 01       	movw	r18, r24
  c4:	2c 53       	subi	r18, 0x3C	; 60
  c6:	31 09       	sbc	r19, r1
  c8:	29 31       	cpi	r18, 0x19	; 25
  ca:	31 05       	cpc	r19, r1
  cc:	10 f4       	brcc	.+4      	; 0xd2 <main+0x38>
		OCR0=50*1;
  ce:	cc bf       	out	0x3c, r28	; 60
  d0:	24 c0       	rjmp	.+72     	; 0x11a <main+0x80>
		else if(a>=85 && a<120)
  d2:	9c 01       	movw	r18, r24
  d4:	25 55       	subi	r18, 0x55	; 85
  d6:	31 09       	sbc	r19, r1
  d8:	23 32       	cpi	r18, 0x23	; 35
  da:	31 05       	cpc	r19, r1
  dc:	10 f4       	brcc	.+4      	; 0xe2 <main+0x48>
		OCR0=50*3;
  de:	dc bf       	out	0x3c, r29	; 60
  e0:	1c c0       	rjmp	.+56     	; 0x11a <main+0x80>
		else if(a>=120 && a<152)
  e2:	9c 01       	movw	r18, r24
  e4:	28 57       	subi	r18, 0x78	; 120
  e6:	31 09       	sbc	r19, r1
  e8:	20 32       	cpi	r18, 0x20	; 32
  ea:	31 05       	cpc	r19, r1
  ec:	10 f4       	brcc	.+4      	; 0xf2 <main+0x58>
		OCR0=50*5;
  ee:	1c bf       	out	0x3c, r17	; 60
  f0:	14 c0       	rjmp	.+40     	; 0x11a <main+0x80>
		else if(a>=152 && a<418)
  f2:	9c 01       	movw	r18, r24
  f4:	28 59       	subi	r18, 0x98	; 152
  f6:	31 09       	sbc	r19, r1
  f8:	2a 30       	cpi	r18, 0x0A	; 10
  fa:	31 40       	sbci	r19, 0x01	; 1
  fc:	10 f4       	brcc	.+4      	; 0x102 <main+0x68>
		OCR0=50*7;
  fe:	0c bf       	out	0x3c, r16	; 60
 100:	0c c0       	rjmp	.+24     	; 0x11a <main+0x80>
		else if(a>=418 && a<950)
 102:	9c 01       	movw	r18, r24
 104:	22 5a       	subi	r18, 0xA2	; 162
 106:	31 40       	sbci	r19, 0x01	; 1
 108:	24 31       	cpi	r18, 0x14	; 20
 10a:	32 40       	sbci	r19, 0x02	; 2
 10c:	10 f4       	brcc	.+4      	; 0x112 <main+0x78>
		OCR0=50*9;
 10e:	fc be       	out	0x3c, r15	; 60
 110:	04 c0       	rjmp	.+8      	; 0x11a <main+0x80>
		else if(a>=950)
 112:	86 3b       	cpi	r24, 0xB6	; 182
 114:	93 40       	sbci	r25, 0x03	; 3
 116:	08 f0       	brcs	.+2      	; 0x11a <main+0x80>
		OCR0=55*5;
 118:	ec be       	out	0x3c, r14	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	4f ef       	ldi	r20, 0xFF	; 255
 11c:	81 ee       	ldi	r24, 0xE1	; 225
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	41 50       	subi	r20, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x86>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x90>
 12a:	00 00       	nop
 12c:	c7 cf       	rjmp	.-114    	; 0xbc <main+0x22>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
