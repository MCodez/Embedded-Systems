
LCD 7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000230  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a07  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000653  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ee  00000000  00000000  000010e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000267  00000000  00000000  000012d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000177  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f6  00000000  00000000  000017ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001aa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_cmd>:
	cmd1=((abc<<4)&(0xf0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  6c:	82 bb       	out	0x12, r24	; 18
	LCD_port&=~(1<<RS);//RS=0 for command
  6e:	90 98       	cbi	0x12, 0	; 18
	LCD_port&=~(1<<RW);///rw=0
  70:	91 98       	cbi	0x12, 1	; 18
	LCD_port|=(1<<EN);///
  72:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	8f e3       	ldi	r24, 0x3F	; 63
  76:	9c e9       	ldi	r25, 0x9C	; 156
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <LCD_cmd+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <LCD_cmd+0x12>
  7e:	00 00       	nop
	_delay_ms(10);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  80:	92 98       	cbi	0x12, 2	; 18
  82:	08 95       	ret

00000084 <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  84:	cf 93       	push	r28
  86:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xf0;
	LCD_cmd(cmd1);
  88:	80 7f       	andi	r24, 0xF0	; 240
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
	cmd1=((abc<<4)&(0xf0));
  90:	20 e1       	ldi	r18, 0x10	; 16
  92:	c2 9f       	mul	r28, r18
  94:	c0 01       	movw	r24, r0
  96:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  98:	99 27       	eor	r25, r25
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
}
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  aa:	88 e2       	ldi	r24, 0x28	; 40
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
  c2:	08 95       	ret

000000c4 <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  c4:	82 bb       	out	0x12, r24	; 18
	LCD_port|=(1<<RS);
  c6:	90 9a       	sbi	0x12, 0	; 18
	LCD_port&=~(1<<RW);
  c8:	91 98       	cbi	0x12, 1	; 18
	LCD_port|=(1<<EN);
  ca:	92 9a       	sbi	0x12, 2	; 18
  cc:	8f e9       	ldi	r24, 0x9F	; 159
  ce:	9f e0       	ldi	r25, 0x0F	; 15
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_data+0xc>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_data+0x12>
  d6:	00 00       	nop
	_delay_ms(1);
	LCD_port&=~(1<<EN);
  d8:	92 98       	cbi	0x12, 2	; 18
  da:	08 95       	ret

000000dc <dis_data>:
}

void dis_data(unsigned char abc)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
  e6:	8c 2f       	mov	r24, r28
  e8:	82 95       	swap	r24
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_data>
}
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LCD_cust_char_1>:

}

LCD_cust_char_1()
{
	dis_cmd(0x40);
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_data(0x08);
  fa:	88 e0       	ldi	r24, 0x08	; 8
  fc:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x0C);
 100:	8c e0       	ldi	r24, 0x0C	; 12
 102:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x06);
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x03);
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x06);
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x0C);
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x08);
 11e:	88 e0       	ldi	r24, 0x08	; 8
 120:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x00);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	
}
 12a:	08 95       	ret

0000012c <LCD_cust_char_2>:
LCD_cust_char_2()
{
	dis_cmd(0x48);
 12c:	88 e4       	ldi	r24, 0x48	; 72
 12e:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_data(0x01);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x03);
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x06);
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x0C);
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x06);
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x03);
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x01);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	dis_data(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
	
}
 162:	08 95       	ret

00000164 <main>:

int main(void)
{
 164:	af 92       	push	r10
 166:	bf 92       	push	r11
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
	DDRD=0xFF;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	81 bb       	out	0x11, r24	; 17
	int i=0;
	lcd_init();
 17c:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_init>
	dis_cmd(0x80);
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	LCD_cust_char_1();
 186:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cust_char_1>
	LCD_cust_char_2();
 18a:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_cust_char_2>
 18e:	ee 24       	eor	r14, r14
 190:	e3 94       	inc	r14
 192:	f1 2c       	mov	r15, r1
}

int main(void)
{
	DDRD=0xFF;
	int i=0;
 194:	00 e0       	ldi	r16, 0x00	; 0
 196:	10 e0       	ldi	r17, 0x00	; 0
	while(i<16)
	{
		
		dis_data(0x00);
		dis_cmd(0x1);
		for(int j=0;j<=i;j++)
 198:	c1 2c       	mov	r12, r1
 19a:	d1 2c       	mov	r13, r1
	LCD_cust_char_1();
	LCD_cust_char_2();
	while(i<16)
	{
		
		dis_data(0x00);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
		dis_cmd(0x1);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
		for(int j=0;j<=i;j++)
 1a8:	11 23       	and	r17, r17
 1aa:	44 f0       	brlt	.+16     	; 0x1bc <main+0x58>
 1ac:	e6 01       	movw	r28, r12
		dis_cmd(0x14);
 1ae:	84 e1       	ldi	r24, 0x14	; 20
 1b0:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	while(i<16)
	{
		
		dis_data(0x00);
		dis_cmd(0x1);
		for(int j=0;j<=i;j++)
 1b4:	21 96       	adiw	r28, 0x01	; 1
 1b6:	0c 17       	cp	r16, r28
 1b8:	1d 07       	cpc	r17, r29
 1ba:	cc f7       	brge	.-14     	; 0x1ae <main+0x4a>
		dis_cmd(0x14);
		i++;
 1bc:	57 01       	movw	r10, r14
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	83 ec       	ldi	r24, 0xC3	; 195
 1c2:	99 e0       	ldi	r25, 0x09	; 9
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x60>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x6a>
 1ce:	00 00       	nop
		_delay_ms(200);
		dis_data(0x01);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
		dis_cmd(0x1);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
		for(int j=0;j<=i;j++)
 1dc:	ff 20       	and	r15, r15
 1de:	44 f0       	brlt	.+16     	; 0x1f0 <main+0x8c>
 1e0:	e6 01       	movw	r28, r12
		dis_cmd(0x14);
 1e2:	84 e1       	ldi	r24, 0x14	; 20
 1e4:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
		dis_cmd(0x14);
		i++;
		_delay_ms(200);
		dis_data(0x01);
		dis_cmd(0x1);
		for(int j=0;j<=i;j++)
 1e8:	21 96       	adiw	r28, 0x01	; 1
 1ea:	ac 16       	cp	r10, r28
 1ec:	bd 06       	cpc	r11, r29
 1ee:	cc f7       	brge	.-14     	; 0x1e2 <main+0x7e>
		dis_cmd(0x14);
		i++;
 1f0:	0e 5f       	subi	r16, 0xFE	; 254
 1f2:	1f 4f       	sbci	r17, 0xFF	; 255
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	81 ee       	ldi	r24, 0xE1	; 225
 1f8:	94 e0       	ldi	r25, 0x04	; 4
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x96>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0xa0>
 204:	00 00       	nop
 206:	22 e0       	ldi	r18, 0x02	; 2
 208:	e2 0e       	add	r14, r18
 20a:	f1 1c       	adc	r15, r1
	int i=0;
	lcd_init();
	dis_cmd(0x80);
	LCD_cust_char_1();
	LCD_cust_char_2();
	while(i<16)
 20c:	00 31       	cpi	r16, 0x10	; 16
 20e:	11 05       	cpc	r17, r1
 210:	29 f6       	brne	.-118    	; 0x19c <main+0x38>
	}
	
	
	//TODO:: Please write your application code
	
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	df 90       	pop	r13
 224:	cf 90       	pop	r12
 226:	bf 90       	pop	r11
 228:	af 90       	pop	r10
 22a:	08 95       	ret

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
