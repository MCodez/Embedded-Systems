
IR 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000fc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000162  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ec  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001a7  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000104  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <turn>:

#include <avr/io.h>
#include <avr/delay.h>
void turn()
{
	PORTB=0x0A;
  6c:	8a e0       	ldi	r24, 0x0A	; 10
  6e:	88 bb       	out	0x18, r24	; 24
	if(PINA==0b00000011)
  70:	89 b3       	in	r24, 0x19	; 25
  72:	83 30       	cpi	r24, 0x03	; 3
  74:	11 f4       	brne	.+4      	; 0x7a <turn+0xe>
	PORTB=0x06;
  76:	86 e0       	ldi	r24, 0x06	; 6
  78:	88 bb       	out	0x18, r24	; 24
	if(PINA==0b00000010)
  7a:	89 b3       	in	r24, 0x19	; 25
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	11 f4       	brne	.+4      	; 0x84 <turn+0x18>
	PORTB=0x0A;
  80:	8a e0       	ldi	r24, 0x0A	; 10
  82:	88 bb       	out	0x18, r24	; 24
	if(PINA==0b00000001)
  84:	89 b3       	in	r24, 0x19	; 25
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	11 f4       	brne	.+4      	; 0x8e <turn+0x22>
	PORTB=0x05;
  8a:	85 e0       	ldi	r24, 0x05	; 5
  8c:	88 bb       	out	0x18, r24	; 24
	if(PINA==0b00001100)
  8e:	89 b3       	in	r24, 0x19	; 25
  90:	8c 30       	cpi	r24, 0x0C	; 12
  92:	11 f4       	brne	.+4      	; 0x98 <turn+0x2c>
	turn();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <turn>
	if(PINA=0b00000011)
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	89 bb       	out	0x19, r24	; 25
	{
		PORTB=0x09;
  9c:	89 e0       	ldi	r24, 0x09	; 9
  9e:	88 bb       	out	0x18, r24	; 24
		turn();
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <turn>
  a4:	08 95       	ret

000000a6 <main>:
	}
}
int main(void)
{
	DDRA=0x00;
  a6:	1a ba       	out	0x1a, r1	; 26
	DDRB=0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	87 bb       	out	0x17, r24	; 23
	
	while(1)
	{
		
		if(PINA==0b00000011)
		PORTB=0x06;
  ac:	06 e0       	ldi	r16, 0x06	; 6
		if(PINA==0b00010011)
		{
			PORTB=0x00;
			DDRA=0xFF;
  ae:	cf ef       	ldi	r28, 0xFF	; 255
			PORTA=0xFF;
			_delay_ms(1000);
		}
		DDRA=0xFF;
		if(PINA==0b00000010)
		PORTB=0x0A;
  b0:	1a e0       	ldi	r17, 0x0A	; 10
		if(PINA==0b00000001)
        PORTB=0x05;
  b2:	d5 e0       	ldi	r29, 0x05	; 5
	
	
	while(1)
	{
		
		if(PINA==0b00000011)
  b4:	89 b3       	in	r24, 0x19	; 25
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	09 f4       	brne	.+2      	; 0xbc <main+0x16>
		PORTB=0x06;
  ba:	08 bb       	out	0x18, r16	; 24
		if(PINA==0b00010011)
  bc:	89 b3       	in	r24, 0x19	; 25
  be:	83 31       	cpi	r24, 0x13	; 19
  c0:	61 f4       	brne	.+24     	; 0xda <main+0x34>
		{
			PORTB=0x00;
  c2:	18 ba       	out	0x18, r1	; 24
			DDRA=0xFF;
  c4:	ca bb       	out	0x1a, r28	; 26
			PORTA=0xFF;
  c6:	cb bb       	out	0x1b, r28	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f e3       	ldi	r18, 0x3F	; 63
  ca:	8d e0       	ldi	r24, 0x0D	; 13
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x28>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x32>
  d8:	00 00       	nop
			_delay_ms(1000);
		}
		DDRA=0xFF;
  da:	ca bb       	out	0x1a, r28	; 26
		if(PINA==0b00000010)
  dc:	89 b3       	in	r24, 0x19	; 25
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	09 f4       	brne	.+2      	; 0xe4 <main+0x3e>
		PORTB=0x0A;
  e2:	18 bb       	out	0x18, r17	; 24
		if(PINA==0b00000001)
  e4:	89 b3       	in	r24, 0x19	; 25
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	09 f4       	brne	.+2      	; 0xec <main+0x46>
        PORTB=0x05;
  ea:	d8 bb       	out	0x18, r29	; 24
		if(PINA==0b00001100)
  ec:	89 b3       	in	r24, 0x19	; 25
  ee:	8c 30       	cpi	r24, 0x0C	; 12
  f0:	09 f7       	brne	.-62     	; 0xb4 <main+0xe>
		{
			turn();
  f2:	0e 94 36 00 	call	0x6c	; 0x6c <turn>
  f6:	de cf       	rjmp	.-68     	; 0xb4 <main+0xe>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
