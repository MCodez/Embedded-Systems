
USART 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000be  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000897  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000148  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000105  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000130  00000000  00000000  00000b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c4  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000065  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000e1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <usart_init>:
#define Baud_Rate 300
#define ubrr_value ((F_CPU/(16*Baud_Rate))-1)

void usart_init()
{
	UBRRL=ubrr_value;
  6c:	84 e0       	ldi	r24, 0x04	; 4
  6e:	89 b9       	out	0x09, r24	; 9
	UBRRH=(ubrr_value>>8);
  70:	8d e0       	ldi	r24, 0x0D	; 13
  72:	80 bd       	out	0x20, r24	; 32
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXEN)|(1<<TXEN);
  78:	88 e1       	ldi	r24, 0x18	; 24
  7a:	8a b9       	out	0x0a, r24	; 10
  7c:	08 95       	ret

0000007e <usart_rec>:
	UDR=data;
}

unsigned char usart_rec()
{
	while(!(UCSRA&(1<<RXC)));
  7e:	5f 9b       	sbis	0x0b, 7	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <usart_rec>
	return UDR;
  82:	8c b1       	in	r24, 0x0c	; 12
}
  84:	08 95       	ret

00000086 <main>:

}

int main(void)
{
	DDRB=0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	87 bb       	out	0x17, r24	; 23
	usart_init();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <usart_init>
	char a;
	while(1)
	{
		a=usart_rec();
		if(a=='w')
		PORTB=0x09;
  8e:	19 e0       	ldi	r17, 0x09	; 9
		if(a=='s')
		PORTB=0x06;
		if(a=='a')
		PORTB=0x0A;
  90:	da e0       	ldi	r29, 0x0A	; 10
	{
		a=usart_rec();
		if(a=='w')
		PORTB=0x09;
		if(a=='s')
		PORTB=0x06;
  92:	c6 e0       	ldi	r28, 0x06	; 6
		if(a=='a')
		PORTB=0x0A;
		if(a=='d')
		PORTB=0x05;
  94:	05 e0       	ldi	r16, 0x05	; 5
	DDRB=0xFF;
	usart_init();
	char a;
	while(1)
	{
		a=usart_rec();
  96:	0e 94 3f 00 	call	0x7e	; 0x7e <usart_rec>
		if(a=='w')
  9a:	87 37       	cpi	r24, 0x77	; 119
  9c:	11 f4       	brne	.+4      	; 0xa2 <main+0x1c>
		PORTB=0x09;
  9e:	18 bb       	out	0x18, r17	; 24
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <main+0x2c>
		if(a=='s')
  a2:	83 37       	cpi	r24, 0x73	; 115
  a4:	11 f4       	brne	.+4      	; 0xaa <main+0x24>
		PORTB=0x06;
  a6:	c8 bb       	out	0x18, r28	; 24
  a8:	f6 cf       	rjmp	.-20     	; 0x96 <main+0x10>
		if(a=='a')
  aa:	81 36       	cpi	r24, 0x61	; 97
  ac:	11 f4       	brne	.+4      	; 0xb2 <main+0x2c>
		PORTB=0x0A;
  ae:	d8 bb       	out	0x18, r29	; 24
  b0:	f2 cf       	rjmp	.-28     	; 0x96 <main+0x10>
		if(a=='d')
  b2:	84 36       	cpi	r24, 0x64	; 100
  b4:	81 f7       	brne	.-32     	; 0x96 <main+0x10>
		PORTB=0x05;
  b6:	08 bb       	out	0x18, r16	; 24
  b8:	ee cf       	rjmp	.-36     	; 0x96 <main+0x10>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
