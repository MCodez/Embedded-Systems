
LDR 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000002b8  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000abb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000080f  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000023a  00000000  00000000  00001361  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029d  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015a  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052f  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001fb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  7a:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
	data1=abc&0xf0;
	LCD_data(data1);
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}
LCD_number(unsigned int num)
  82:	85 bb       	out	0x15, r24	; 21
  84:	a8 98       	cbi	0x15, 0	; 21
  86:	a9 98       	cbi	0x15, 1	; 21
  88:	aa 9a       	sbi	0x15, 2	; 21
  8a:	8f e3       	ldi	r24, 0x3F	; 63
  8c:	9c e9       	ldi	r25, 0x9C	; 156
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmd+0x12>
  94:	00 00       	nop
  96:	aa 98       	cbi	0x15, 2	; 21
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
  98:	08 95       	ret

0000009a <dis_cmd>:
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
	}
}
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  a6:	20 e1       	ldi	r18, 0x10	; 16
  a8:	c2 9f       	mul	r28, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
  ae:	99 27       	eor	r25, r25
  b0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  c0:	88 e2       	ldi	r24, 0x28	; 40
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
  d8:	08 95       	ret

000000da <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  da:	85 bb       	out	0x15, r24	; 21
	LCD_port|=(1<<RS);
  dc:	a8 9a       	sbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);
  de:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);
  e0:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9c e9       	ldi	r25, 0x9C	; 156
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_data+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_data+0x12>
  ec:	00 00       	nop
	_delay_ms(10);
	LCD_port&=~(1<<EN);
  ee:	aa 98       	cbi	0x15, 2	; 21
  f0:	08 95       	ret

000000f2 <dis_data>:
}

void dis_data(unsigned char abc)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
  fc:	8c 2f       	mov	r24, r28
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_string>:
		dis_data(M[j]+0x30);
	}
}

void LCD_string(unsigned char *str)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	int i=0;
	while(str[i]!='\0')
 110:	88 81       	ld	r24, Y
 112:	88 23       	and	r24, r24
 114:	31 f0       	breq	.+12     	; 0x122 <LCD_string+0x18>
		M[j]=N[i];
		dis_data(M[j]+0x30);
	}
}

void LCD_string(unsigned char *str)
 116:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while(str[i]!='\0')
	{	dis_data(str[i]);
 118:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
}

void LCD_string(unsigned char *str)
{
	int i=0;
	while(str[i]!='\0')
 11c:	89 91       	ld	r24, Y+
 11e:	81 11       	cpse	r24, r1
 120:	fb cf       	rjmp	.-10     	; 0x118 <LCD_string+0xe>
	{	dis_data(str[i]);
		i++;
	}

}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <ADC_init>:

void ADC_init(void)
{
	ADMUX=(1<<REFS0);
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 12c:	87 e8       	ldi	r24, 0x87	; 135
 12e:	86 b9       	out	0x06, r24	; 6
 130:	08 95       	ret

00000132 <ADC_read>:
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
	ADMUX|=ch;
 132:	97 b1       	in	r25, 0x07	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
 134:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
 136:	98 2b       	or	r25, r24
 138:	97 b9       	out	0x07, r25	; 7
	ADCSRA|=(1<<ADSC);
 13a:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)));
 13c:	34 9b       	sbis	0x06, 4	; 6
 13e:	fe cf       	rjmp	.-4      	; 0x13c <ADC_read+0xa>
	ADCSRA|=(1<<ADIF);
 140:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
 142:	24 b1       	in	r18, 0x04	; 4
 144:	35 b1       	in	r19, 0x05	; 5
}
 146:	82 2f       	mov	r24, r18
 148:	93 2f       	mov	r25, r19
 14a:	08 95       	ret

0000014c <main>:


int main(void)
{
	DDRA=0x00;
 14c:	1a ba       	out	0x1a, r1	; 26
	DDRC=0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 152:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
	ADC_init();
 156:	0e 94 94 00 	call	0x128	; 0x128 <ADC_init>
	unsigned int a;
	while(1)
	{
		a=ADC_read('0');
 15a:	80 e3       	ldi	r24, 0x30	; 48
 15c:	0e 94 99 00 	call	0x132	; 0x132 <ADC_read>
 160:	ec 01       	movw	r28, r24
		if(a<=180)
 162:	85 3b       	cpi	r24, 0xB5	; 181
 164:	91 05       	cpc	r25, r1
 166:	98 f4       	brcc	.+38     	; 0x18e <main+0x42>
		{	
			dis_cmd(0x1);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		    LCD_string("BLACK");
 174:	80 e6       	ldi	r24, 0x60	; 96
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	83 ed       	ldi	r24, 0xD3	; 211
 180:	90 e3       	ldi	r25, 0x30	; 48
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x36>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x40>
 18c:	00 00       	nop
		    _delay_ms(1000);
		}
		if(a>180 && a<=320)
 18e:	ce 01       	movw	r24, r28
 190:	85 5b       	subi	r24, 0xB5	; 181
 192:	91 09       	sbc	r25, r1
 194:	8c 38       	cpi	r24, 0x8C	; 140
 196:	91 05       	cpc	r25, r1
 198:	98 f4       	brcc	.+38     	; 0x1c0 <main+0x74>
		{
			dis_cmd(0x1);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			LCD_string("BLUE");
 1a6:	86 e6       	ldi	r24, 0x66	; 102
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	83 ed       	ldi	r24, 0xD3	; 211
 1b2:	90 e3       	ldi	r25, 0x30	; 48
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x68>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x72>
 1be:	00 00       	nop
			_delay_ms(1000);
		}
		if(a>320 && a<=400)
 1c0:	ce 01       	movw	r24, r28
 1c2:	81 54       	subi	r24, 0x41	; 65
 1c4:	91 40       	sbci	r25, 0x01	; 1
 1c6:	80 35       	cpi	r24, 0x50	; 80
 1c8:	91 05       	cpc	r25, r1
 1ca:	98 f4       	brcc	.+38     	; 0x1f2 <main+0xa6>
		{
			dis_cmd(0x1);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			LCD_string("RED");
 1d8:	8b e6       	ldi	r24, 0x6B	; 107
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	83 ed       	ldi	r24, 0xD3	; 211
 1e4:	90 e3       	ldi	r25, 0x30	; 48
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x9a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0xa4>
 1f0:	00 00       	nop
			_delay_ms(1000);
		}
		if(a>400 && a<=500)
 1f2:	ce 01       	movw	r24, r28
 1f4:	81 59       	subi	r24, 0x91	; 145
 1f6:	91 40       	sbci	r25, 0x01	; 1
 1f8:	84 36       	cpi	r24, 0x64	; 100
 1fa:	91 05       	cpc	r25, r1
 1fc:	98 f4       	brcc	.+38     	; 0x224 <main+0xd8>
		{
			dis_cmd(0x1);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			LCD_string("GREEN");
 20a:	8f e6       	ldi	r24, 0x6F	; 111
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	83 ed       	ldi	r24, 0xD3	; 211
 216:	90 e3       	ldi	r25, 0x30	; 48
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0xcc>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0xd6>
 222:	00 00       	nop
			_delay_ms(1000);
		}
		if(a>500 && a<=550)
 224:	ce 01       	movw	r24, r28
 226:	85 5f       	subi	r24, 0xF5	; 245
 228:	91 40       	sbci	r25, 0x01	; 1
 22a:	c2 97       	sbiw	r24, 0x32	; 50
 22c:	98 f4       	brcc	.+38     	; 0x254 <main+0x108>
		{
			dis_cmd(0x1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			LCD_string("ORANGE");
 23a:	85 e7       	ldi	r24, 0x75	; 117
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	83 ed       	ldi	r24, 0xD3	; 211
 246:	90 e3       	ldi	r25, 0x30	; 48
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0xfc>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x106>
 252:	00 00       	nop
			_delay_ms(1000);
		}
		if(a>550 && a<=600)
 254:	ce 01       	movw	r24, r28
 256:	87 52       	subi	r24, 0x27	; 39
 258:	92 40       	sbci	r25, 0x02	; 2
 25a:	c2 97       	sbiw	r24, 0x32	; 50
 25c:	98 f4       	brcc	.+38     	; 0x284 <main+0x138>
		{
			dis_cmd(0x1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			LCD_string("YELLOW");
 26a:	8c e7       	ldi	r24, 0x7C	; 124
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	83 ed       	ldi	r24, 0xD3	; 211
 276:	90 e3       	ldi	r25, 0x30	; 48
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x12c>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x136>
 282:	00 00       	nop
			_delay_ms(1000);
		}
		if(a>600)
 284:	c9 35       	cpi	r28, 0x59	; 89
 286:	d2 40       	sbci	r29, 0x02	; 2
 288:	08 f4       	brcc	.+2      	; 0x28c <main+0x140>
 28a:	67 cf       	rjmp	.-306    	; 0x15a <main+0xe>
		{
			dis_cmd(0x1);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			LCD_string("WHITE");
 298:	83 e8       	ldi	r24, 0x83	; 131
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	93 ed       	ldi	r25, 0xD3	; 211
 2a4:	20 e3       	ldi	r18, 0x30	; 48
 2a6:	81 50       	subi	r24, 0x01	; 1
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	20 40       	sbci	r18, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x15a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x164>
 2b0:	00 00       	nop
 2b2:	53 cf       	rjmp	.-346    	; 0x15a <main+0xe>

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
