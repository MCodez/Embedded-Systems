
MATRIX 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c6  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000089f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001e3  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e1  00000000  00000000  00000ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001da  00000000  00000000  00000bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000115  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>
#include <avr/delay.h>
int main(void)
{
    DDRC=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD=0xFF;
  70:	81 bb       	out	0x11, r24	; 17
	while(1)
    {
    PORTD=0x41;
  72:	61 e4       	ldi	r22, 0x41	; 65
	PORTC=0x00;
	_delay_ms(20);
	PORTD=0x22;
  74:	52 e2       	ldi	r21, 0x22	; 34
	PORTC=0xFD;
  76:	4d ef       	ldi	r20, 0xFD	; 253
	_delay_ms(20);
	PORTD=0x14;
  78:	34 e1       	ldi	r19, 0x14	; 20
	PORTC=0xFB;
  7a:	2b ef       	ldi	r18, 0xFB	; 251
	_delay_ms(20);
	PORTD=0x08;
  7c:	98 e0       	ldi	r25, 0x08	; 8
	PORTC=0xF7;
  7e:	87 ef       	ldi	r24, 0xF7	; 247
{
    DDRC=0xFF;
	DDRD=0xFF;
	while(1)
    {
    PORTD=0x41;
  80:	62 bb       	out	0x12, r22	; 18
	PORTC=0x00;
  82:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	e7 e8       	ldi	r30, 0x87	; 135
  86:	f3 e1       	ldi	r31, 0x13	; 19
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
	_delay_ms(20);
	PORTD=0x22;
  90:	52 bb       	out	0x12, r21	; 18
	PORTC=0xFD;
  92:	45 bb       	out	0x15, r20	; 21
  94:	e7 e8       	ldi	r30, 0x87	; 135
  96:	f3 e1       	ldi	r31, 0x13	; 19
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
	_delay_ms(20);
	PORTD=0x14;
  a0:	32 bb       	out	0x12, r19	; 18
	PORTC=0xFB;
  a2:	25 bb       	out	0x15, r18	; 21
  a4:	e7 e8       	ldi	r30, 0x87	; 135
  a6:	f3 e1       	ldi	r31, 0x13	; 19
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x3c>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
	_delay_ms(20);
	PORTD=0x08;
  b0:	92 bb       	out	0x12, r25	; 18
	PORTC=0xF7;
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	e3 ed       	ldi	r30, 0xD3	; 211
  b6:	f0 e3       	ldi	r31, 0x30	; 48
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x4c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x52>
  be:	00 00       	nop
  c0:	df cf       	rjmp	.-66     	; 0x80 <main+0x14>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
