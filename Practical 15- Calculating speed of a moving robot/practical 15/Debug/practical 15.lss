
practical 15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000004ec  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000055d  00000000  00000000  00000d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000023a  00000000  00000000  000012bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ad  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a8  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000611  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000020ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 02 01 	call	0x204	; 0x204 <main>
  7a:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
	cmd1=((abc<<4)&(0xf0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  82:	85 bb       	out	0x15, r24	; 21
	LCD_port&=~(1<<RS);//RS=0 for command
  84:	a8 98       	cbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);///rw=0
  86:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);///
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e3       	ldi	r24, 0x3F	; 63
  8c:	9c e9       	ldi	r25, 0x9C	; 156
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmd+0x12>
  94:	00 00       	nop
	_delay_ms(10);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  96:	aa 98       	cbi	0x15, 2	; 21
  98:	08 95       	ret

0000009a <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xf0;
	LCD_cmd(cmd1);
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	cmd1=((abc<<4)&(0xf0));
  a6:	20 e1       	ldi	r18, 0x10	; 16
  a8:	c2 9f       	mul	r28, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  ae:	99 27       	eor	r25, r25
  b0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  c0:	88 e2       	ldi	r24, 0x28	; 40
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
  d8:	08 95       	ret

000000da <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  da:	85 bb       	out	0x15, r24	; 21
	LCD_port|=(1<<RS);
  dc:	a8 9a       	sbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);
  de:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);
  e0:	aa 9a       	sbi	0x15, 2	; 21
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9c e9       	ldi	r25, 0x9C	; 156
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_data+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_data+0x12>
  ec:	00 00       	nop
	_delay_ms(10);
	LCD_port&=~(1<<EN);
  ee:	aa 98       	cbi	0x15, 2	; 21
  f0:	08 95       	ret

000000f2 <dis_data>:
}

void dis_data(unsigned char abc)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
  fc:	8c 2f       	mov	r24, r28
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_number>:
LCD_number(unsigned int num)
{
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	64 97       	sbiw	r28, 0x14	; 20
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	ac 01       	movw	r20, r24
	int N[10],M[10],count=0,i=0,j,num1;
	while(num>0)
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	09 f4       	brne	.+2      	; 0x12e <LCD_number+0x24>
 12c:	3d c0       	rjmp	.+122    	; 0x1a8 <LCD_number+0x9e>
 12e:	fe 01       	movw	r30, r28
 130:	31 96       	adiw	r30, 0x01	; 1
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}
LCD_number(unsigned int num)
{
	int N[10],M[10],count=0,i=0,j,num1;
 132:	e1 2c       	mov	r14, r1
 134:	f1 2c       	mov	r15, r1
	while(num>0)
	{
		num1=num%10;
 136:	9a 01       	movw	r18, r20
 138:	ad ec       	ldi	r26, 0xCD	; 205
 13a:	bc ec       	ldi	r27, 0xCC	; 204
 13c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__umulhisi3>
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	bc 01       	movw	r22, r24
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	9c 01       	movw	r18, r24
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	26 0f       	add	r18, r22
 162:	37 1f       	adc	r19, r23
 164:	42 1b       	sub	r20, r18
 166:	53 0b       	sbc	r21, r19
		N[i]=num1;
 168:	41 93       	st	Z+, r20
 16a:	51 93       	st	Z+, r21
		i++;
		num=num/10;
 16c:	ac 01       	movw	r20, r24
		count++;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	e8 1a       	sub	r14, r24
 172:	f8 0a       	sbc	r15, r24
	LCD_data(data1);
}
LCD_number(unsigned int num)
{
	int N[10],M[10],count=0,i=0,j,num1;
	while(num>0)
 174:	41 15       	cp	r20, r1
 176:	51 05       	cpc	r21, r1
 178:	f1 f6       	brne	.-68     	; 0x136 <LCD_number+0x2c>
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
 17a:	87 01       	movw	r16, r14
 17c:	01 50       	subi	r16, 0x01	; 1
 17e:	11 09       	sbc	r17, r1
 180:	9a f0       	brmi	.+38     	; 0x1a8 <LCD_number+0x9e>
	data1=abc&0xf0;
	LCD_data(data1);
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}
LCD_number(unsigned int num)
 182:	ee 0c       	add	r14, r14
 184:	ff 1c       	adc	r15, r15
 186:	e1 e0       	ldi	r30, 0x01	; 1
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ec 0f       	add	r30, r28
 18c:	fd 1f       	adc	r31, r29
 18e:	ee 0e       	add	r14, r30
 190:	ff 1e       	adc	r15, r31
 192:	f2 e0       	ldi	r31, 0x02	; 2
 194:	ef 1a       	sub	r14, r31
 196:	f1 08       	sbc	r15, r1
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
 198:	f7 01       	movw	r30, r14
 19a:	80 81       	ld	r24, Z
 19c:	80 5d       	subi	r24, 0xD0	; 208
 19e:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
 1a2:	01 50       	subi	r16, 0x01	; 1
 1a4:	11 09       	sbc	r17, r1
 1a6:	a8 f7       	brcc	.-22     	; 0x192 <LCD_number+0x88>
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
	}
}
 1a8:	64 96       	adiw	r28, 0x14	; 20
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	08 95       	ret

000001c2 <LCD_string>:

void LCD_string(unsigned char *str)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!='\0')
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	31 f0       	breq	.+12     	; 0x1da <LCD_string+0x18>
		M[j]=N[i];
		dis_data(M[j]+0x30);
	}
}

void LCD_string(unsigned char *str)
 1ce:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!='\0')
	{	dis_data(str[i]);
 1d0:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
}

void LCD_string(unsigned char *str)
{
	int i;
	while(str[i]!='\0')
 1d4:	89 91       	ld	r24, Y+
 1d6:	81 11       	cpse	r24, r1
 1d8:	fb cf       	rjmp	.-10     	; 0x1d0 <LCD_string+0xe>
	{	dis_data(str[i]);
		i++;
	}

}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <ADC_init>:

void ADC_init(void)
{
	ADMUX=(1<<REFS0);
 1e0:	80 e4       	ldi	r24, 0x40	; 64
 1e2:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1e4:	87 e8       	ldi	r24, 0x87	; 135
 1e6:	86 b9       	out	0x06, r24	; 6
 1e8:	08 95       	ret

000001ea <ADC_read>:
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
	ADMUX|=ch;
 1ea:	97 b1       	in	r25, 0x07	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
 1ec:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
 1ee:	98 2b       	or	r25, r24
 1f0:	97 b9       	out	0x07, r25	; 7
	ADCSRA|=(1<<ADSC);
 1f2:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)));
 1f4:	34 9b       	sbis	0x06, 4	; 6
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <ADC_read+0xa>
	ADCSRA|=(1<<ADIF);
 1f8:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
 1fa:	24 b1       	in	r18, 0x04	; 4
 1fc:	35 b1       	in	r19, 0x05	; 5
}
 1fe:	82 2f       	mov	r24, r18
 200:	93 2f       	mov	r25, r19
 202:	08 95       	ret

00000204 <main>:


int main(void)
{
 204:	3f 92       	push	r3
 206:	4f 92       	push	r4
 208:	5f 92       	push	r5
 20a:	6f 92       	push	r6
 20c:	7f 92       	push	r7
 20e:	8f 92       	push	r8
 210:	9f 92       	push	r9
 212:	af 92       	push	r10
 214:	bf 92       	push	r11
 216:	cf 92       	push	r12
 218:	df 92       	push	r13
 21a:	ef 92       	push	r14
 21c:	ff 92       	push	r15
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
	DDRB=0xFF;
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	87 bb       	out	0x17, r24	; 23
	DDRA=0x00;
 22a:	1a ba       	out	0x1a, r1	; 26
	DDRC=0xFF;
 22c:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 22e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
	ADC_init();
 232:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ADC_init>
	unsigned int a;
	int distance,time=0,speed;
 236:	c0 e0       	ldi	r28, 0x00	; 0
 238:	d0 e0       	ldi	r29, 0x00	; 0
	while(ADC_read('1')<=950)
	{
		PORTB=0x09;
 23a:	0f 2e       	mov	r0, r31
 23c:	f9 e0       	ldi	r31, 0x09	; 9
 23e:	3f 2e       	mov	r3, r31
 240:	f0 2d       	mov	r31, r0
		time+=1;
		a=ADC_read('0');
		if(a>=60 && a<65)
		distance=20;
 242:	0f 2e       	mov	r0, r31
 244:	f4 e1       	ldi	r31, 0x14	; 20
 246:	ef 2e       	mov	r14, r31
 248:	f1 2c       	mov	r15, r1
 24a:	f0 2d       	mov	r31, r0
		else if(a>=65 && a<70)
		distance=19;
 24c:	0f 2e       	mov	r0, r31
 24e:	f3 e1       	ldi	r31, 0x13	; 19
 250:	cf 2e       	mov	r12, r31
 252:	d1 2c       	mov	r13, r1
 254:	f0 2d       	mov	r31, r0
		else if(a>=70 && a<75)
		distance=18;
 256:	0f 2e       	mov	r0, r31
 258:	f2 e1       	ldi	r31, 0x12	; 18
 25a:	af 2e       	mov	r10, r31
 25c:	b1 2c       	mov	r11, r1
 25e:	f0 2d       	mov	r31, r0
		else if(a>=75 && a<80)
		distance=17;
 260:	0f 2e       	mov	r0, r31
 262:	f1 e1       	ldi	r31, 0x11	; 17
 264:	8f 2e       	mov	r8, r31
 266:	91 2c       	mov	r9, r1
 268:	f0 2d       	mov	r31, r0
		else if(a>=80 && a<85)
		distance=16;
 26a:	68 94       	set
 26c:	66 24       	eor	r6, r6
 26e:	64 f8       	bld	r6, 4
 270:	71 2c       	mov	r7, r1
	DDRC=0xFF;
	lcd_init();
	ADC_init();
	unsigned int a;
	int distance,time=0,speed;
	while(ADC_read('1')<=950)
 272:	eb c0       	rjmp	.+470    	; 0x44a <main+0x246>
	{
		PORTB=0x09;
 274:	38 ba       	out	0x18, r3	; 24
		time+=1;
 276:	21 96       	adiw	r28, 0x01	; 1
		a=ADC_read('0');
 278:	80 e3       	ldi	r24, 0x30	; 48
 27a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ADC_read>
		if(a>=60 && a<65)
 27e:	9c 01       	movw	r18, r24
 280:	2c 53       	subi	r18, 0x3C	; 60
 282:	31 09       	sbc	r19, r1
 284:	25 30       	cpi	r18, 0x05	; 5
 286:	31 05       	cpc	r19, r1
 288:	08 f4       	brcc	.+2      	; 0x28c <main+0x88>
 28a:	86 c0       	rjmp	.+268    	; 0x398 <main+0x194>
		distance=20;
		else if(a>=65 && a<70)
 28c:	9c 01       	movw	r18, r24
 28e:	21 54       	subi	r18, 0x41	; 65
 290:	31 09       	sbc	r19, r1
 292:	25 30       	cpi	r18, 0x05	; 5
 294:	31 05       	cpc	r19, r1
 296:	08 f4       	brcc	.+2      	; 0x29a <main+0x96>
 298:	81 c0       	rjmp	.+258    	; 0x39c <main+0x198>
		distance=19;
		else if(a>=70 && a<75)
 29a:	9c 01       	movw	r18, r24
 29c:	26 54       	subi	r18, 0x46	; 70
 29e:	31 09       	sbc	r19, r1
 2a0:	25 30       	cpi	r18, 0x05	; 5
 2a2:	31 05       	cpc	r19, r1
 2a4:	08 f4       	brcc	.+2      	; 0x2a8 <main+0xa4>
 2a6:	7c c0       	rjmp	.+248    	; 0x3a0 <main+0x19c>
		distance=18;
		else if(a>=75 && a<80)
 2a8:	9c 01       	movw	r18, r24
 2aa:	2b 54       	subi	r18, 0x4B	; 75
 2ac:	31 09       	sbc	r19, r1
 2ae:	25 30       	cpi	r18, 0x05	; 5
 2b0:	31 05       	cpc	r19, r1
 2b2:	08 f4       	brcc	.+2      	; 0x2b6 <main+0xb2>
 2b4:	77 c0       	rjmp	.+238    	; 0x3a4 <main+0x1a0>
		distance=17;
		else if(a>=80 && a<85)
 2b6:	9c 01       	movw	r18, r24
 2b8:	20 55       	subi	r18, 0x50	; 80
 2ba:	31 09       	sbc	r19, r1
 2bc:	25 30       	cpi	r18, 0x05	; 5
 2be:	31 05       	cpc	r19, r1
 2c0:	08 f4       	brcc	.+2      	; 0x2c4 <main+0xc0>
 2c2:	72 c0       	rjmp	.+228    	; 0x3a8 <main+0x1a4>
		distance=16;
		else if(a>=85 && a<92)
 2c4:	9c 01       	movw	r18, r24
 2c6:	25 55       	subi	r18, 0x55	; 85
 2c8:	31 09       	sbc	r19, r1
 2ca:	27 30       	cpi	r18, 0x07	; 7
 2cc:	31 05       	cpc	r19, r1
 2ce:	08 f4       	brcc	.+2      	; 0x2d2 <main+0xce>
 2d0:	6d c0       	rjmp	.+218    	; 0x3ac <main+0x1a8>
		distance=15;
		else if(a>=92 && a<96)
 2d2:	9c 01       	movw	r18, r24
 2d4:	2c 55       	subi	r18, 0x5C	; 92
 2d6:	31 09       	sbc	r19, r1
 2d8:	24 30       	cpi	r18, 0x04	; 4
 2da:	31 05       	cpc	r19, r1
 2dc:	08 f4       	brcc	.+2      	; 0x2e0 <main+0xdc>
 2de:	69 c0       	rjmp	.+210    	; 0x3b2 <main+0x1ae>
		distance=14;
		else if(a>=96 && a<99)
 2e0:	9c 01       	movw	r18, r24
 2e2:	20 56       	subi	r18, 0x60	; 96
 2e4:	31 09       	sbc	r19, r1
 2e6:	23 30       	cpi	r18, 0x03	; 3
 2e8:	31 05       	cpc	r19, r1
 2ea:	08 f4       	brcc	.+2      	; 0x2ee <main+0xea>
 2ec:	65 c0       	rjmp	.+202    	; 0x3b8 <main+0x1b4>
		distance=13;
		else if(a>=99 && a<113)
 2ee:	9c 01       	movw	r18, r24
 2f0:	23 56       	subi	r18, 0x63	; 99
 2f2:	31 09       	sbc	r19, r1
 2f4:	2e 30       	cpi	r18, 0x0E	; 14
 2f6:	31 05       	cpc	r19, r1
 2f8:	08 f4       	brcc	.+2      	; 0x2fc <main+0xf8>
 2fa:	61 c0       	rjmp	.+194    	; 0x3be <main+0x1ba>
		distance=12;
		else if(a>=113 && a<120)
 2fc:	9c 01       	movw	r18, r24
 2fe:	21 57       	subi	r18, 0x71	; 113
 300:	31 09       	sbc	r19, r1
 302:	27 30       	cpi	r18, 0x07	; 7
 304:	31 05       	cpc	r19, r1
 306:	08 f4       	brcc	.+2      	; 0x30a <main+0x106>
 308:	5d c0       	rjmp	.+186    	; 0x3c4 <main+0x1c0>
		distance=11;
		else if(a>=120 && a<152)
 30a:	9c 01       	movw	r18, r24
 30c:	28 57       	subi	r18, 0x78	; 120
 30e:	31 09       	sbc	r19, r1
 310:	20 32       	cpi	r18, 0x20	; 32
 312:	31 05       	cpc	r19, r1
 314:	08 f4       	brcc	.+2      	; 0x318 <main+0x114>
 316:	59 c0       	rjmp	.+178    	; 0x3ca <main+0x1c6>
		distance=10;
		else if(a>=152 && a<184)
 318:	9c 01       	movw	r18, r24
 31a:	28 59       	subi	r18, 0x98	; 152
 31c:	31 09       	sbc	r19, r1
 31e:	20 32       	cpi	r18, 0x20	; 32
 320:	31 05       	cpc	r19, r1
 322:	08 f4       	brcc	.+2      	; 0x326 <main+0x122>
 324:	55 c0       	rjmp	.+170    	; 0x3d0 <main+0x1cc>
		distance=9;
		else if(a>=184 && a<216)
 326:	9c 01       	movw	r18, r24
 328:	28 5b       	subi	r18, 0xB8	; 184
 32a:	31 09       	sbc	r19, r1
 32c:	20 32       	cpi	r18, 0x20	; 32
 32e:	31 05       	cpc	r19, r1
 330:	08 f4       	brcc	.+2      	; 0x334 <main+0x130>
 332:	51 c0       	rjmp	.+162    	; 0x3d6 <main+0x1d2>
		distance=8;
		else if(a>=216 && a<248)
 334:	9c 01       	movw	r18, r24
 336:	28 5d       	subi	r18, 0xD8	; 216
 338:	31 09       	sbc	r19, r1
 33a:	20 32       	cpi	r18, 0x20	; 32
 33c:	31 05       	cpc	r19, r1
 33e:	08 f4       	brcc	.+2      	; 0x342 <main+0x13e>
 340:	4d c0       	rjmp	.+154    	; 0x3dc <main+0x1d8>
		distance=7;
		else if(a>=248 && a<280)
 342:	9c 01       	movw	r18, r24
 344:	28 5f       	subi	r18, 0xF8	; 248
 346:	31 09       	sbc	r19, r1
 348:	20 32       	cpi	r18, 0x20	; 32
 34a:	31 05       	cpc	r19, r1
 34c:	08 f4       	brcc	.+2      	; 0x350 <main+0x14c>
 34e:	49 c0       	rjmp	.+146    	; 0x3e2 <main+0x1de>
		distance=6;
		else if(a>=280 && a<418)
 350:	9c 01       	movw	r18, r24
 352:	28 51       	subi	r18, 0x18	; 24
 354:	31 40       	sbci	r19, 0x01	; 1
 356:	2a 38       	cpi	r18, 0x8A	; 138
 358:	31 05       	cpc	r19, r1
 35a:	08 f4       	brcc	.+2      	; 0x35e <main+0x15a>
 35c:	45 c0       	rjmp	.+138    	; 0x3e8 <main+0x1e4>
		distance=5;
		else if(a>=418 && a<556)
 35e:	9c 01       	movw	r18, r24
 360:	22 5a       	subi	r18, 0xA2	; 162
 362:	31 40       	sbci	r19, 0x01	; 1
 364:	2a 38       	cpi	r18, 0x8A	; 138
 366:	31 05       	cpc	r19, r1
 368:	08 f4       	brcc	.+2      	; 0x36c <main+0x168>
 36a:	41 c0       	rjmp	.+130    	; 0x3ee <main+0x1ea>
		distance=4;
		else if(a>=556 && a<694)
 36c:	9c 01       	movw	r18, r24
 36e:	2c 52       	subi	r18, 0x2C	; 44
 370:	32 40       	sbci	r19, 0x02	; 2
 372:	2a 38       	cpi	r18, 0x8A	; 138
 374:	31 05       	cpc	r19, r1
 376:	f0 f1       	brcs	.+124    	; 0x3f4 <main+0x1f0>
		distance=3;
		else if(a>=694 && a<832)
 378:	9c 01       	movw	r18, r24
 37a:	26 5b       	subi	r18, 0xB6	; 182
 37c:	32 40       	sbci	r19, 0x02	; 2
 37e:	2a 38       	cpi	r18, 0x8A	; 138
 380:	31 05       	cpc	r19, r1
 382:	d8 f1       	brcs	.+118    	; 0x3fa <main+0x1f6>
		distance=2;
		else if(a>=832 && a<950)
 384:	9c 01       	movw	r18, r24
 386:	20 54       	subi	r18, 0x40	; 64
 388:	33 40       	sbci	r19, 0x03	; 3
 38a:	26 37       	cpi	r18, 0x76	; 118
 38c:	31 05       	cpc	r19, r1
 38e:	c0 f1       	brcs	.+112    	; 0x400 <main+0x1fc>
		distance=1;
		else if(a>=950)
 390:	86 3b       	cpi	r24, 0xB6	; 182
 392:	93 40       	sbci	r25, 0x03	; 3
 394:	c0 f5       	brcc	.+112    	; 0x406 <main+0x202>
 396:	39 c0       	rjmp	.+114    	; 0x40a <main+0x206>
	{
		PORTB=0x09;
		time+=1;
		a=ADC_read('0');
		if(a>=60 && a<65)
		distance=20;
 398:	87 01       	movw	r16, r14
 39a:	37 c0       	rjmp	.+110    	; 0x40a <main+0x206>
		else if(a>=65 && a<70)
		distance=19;
 39c:	86 01       	movw	r16, r12
 39e:	35 c0       	rjmp	.+106    	; 0x40a <main+0x206>
		else if(a>=70 && a<75)
		distance=18;
 3a0:	85 01       	movw	r16, r10
 3a2:	33 c0       	rjmp	.+102    	; 0x40a <main+0x206>
		else if(a>=75 && a<80)
		distance=17;
 3a4:	84 01       	movw	r16, r8
 3a6:	31 c0       	rjmp	.+98     	; 0x40a <main+0x206>
		else if(a>=80 && a<85)
		distance=16;
 3a8:	83 01       	movw	r16, r6
 3aa:	2f c0       	rjmp	.+94     	; 0x40a <main+0x206>
		else if(a>=85 && a<92)
		distance=15;
 3ac:	0f e0       	ldi	r16, 0x0F	; 15
 3ae:	10 e0       	ldi	r17, 0x00	; 0
 3b0:	2c c0       	rjmp	.+88     	; 0x40a <main+0x206>
		else if(a>=92 && a<96)
		distance=14;
 3b2:	0e e0       	ldi	r16, 0x0E	; 14
 3b4:	10 e0       	ldi	r17, 0x00	; 0
 3b6:	29 c0       	rjmp	.+82     	; 0x40a <main+0x206>
		else if(a>=96 && a<99)
		distance=13;
 3b8:	0d e0       	ldi	r16, 0x0D	; 13
 3ba:	10 e0       	ldi	r17, 0x00	; 0
 3bc:	26 c0       	rjmp	.+76     	; 0x40a <main+0x206>
		else if(a>=99 && a<113)
		distance=12;
 3be:	0c e0       	ldi	r16, 0x0C	; 12
 3c0:	10 e0       	ldi	r17, 0x00	; 0
 3c2:	23 c0       	rjmp	.+70     	; 0x40a <main+0x206>
		else if(a>=113 && a<120)
		distance=11;
 3c4:	0b e0       	ldi	r16, 0x0B	; 11
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	20 c0       	rjmp	.+64     	; 0x40a <main+0x206>
		else if(a>=120 && a<152)
		distance=10;
 3ca:	0a e0       	ldi	r16, 0x0A	; 10
 3cc:	10 e0       	ldi	r17, 0x00	; 0
 3ce:	1d c0       	rjmp	.+58     	; 0x40a <main+0x206>
		else if(a>=152 && a<184)
		distance=9;
 3d0:	09 e0       	ldi	r16, 0x09	; 9
 3d2:	10 e0       	ldi	r17, 0x00	; 0
 3d4:	1a c0       	rjmp	.+52     	; 0x40a <main+0x206>
		else if(a>=184 && a<216)
		distance=8;
 3d6:	08 e0       	ldi	r16, 0x08	; 8
 3d8:	10 e0       	ldi	r17, 0x00	; 0
 3da:	17 c0       	rjmp	.+46     	; 0x40a <main+0x206>
		else if(a>=216 && a<248)
		distance=7;
 3dc:	07 e0       	ldi	r16, 0x07	; 7
 3de:	10 e0       	ldi	r17, 0x00	; 0
 3e0:	14 c0       	rjmp	.+40     	; 0x40a <main+0x206>
		else if(a>=248 && a<280)
		distance=6;
 3e2:	06 e0       	ldi	r16, 0x06	; 6
 3e4:	10 e0       	ldi	r17, 0x00	; 0
 3e6:	11 c0       	rjmp	.+34     	; 0x40a <main+0x206>
		else if(a>=280 && a<418)
		distance=5;
 3e8:	05 e0       	ldi	r16, 0x05	; 5
 3ea:	10 e0       	ldi	r17, 0x00	; 0
 3ec:	0e c0       	rjmp	.+28     	; 0x40a <main+0x206>
		else if(a>=418 && a<556)
		distance=4;
 3ee:	04 e0       	ldi	r16, 0x04	; 4
 3f0:	10 e0       	ldi	r17, 0x00	; 0
 3f2:	0b c0       	rjmp	.+22     	; 0x40a <main+0x206>
		else if(a>=556 && a<694)
		distance=3;
 3f4:	03 e0       	ldi	r16, 0x03	; 3
 3f6:	10 e0       	ldi	r17, 0x00	; 0
 3f8:	08 c0       	rjmp	.+16     	; 0x40a <main+0x206>
		else if(a>=694 && a<832)
		distance=2;
 3fa:	02 e0       	ldi	r16, 0x02	; 2
 3fc:	10 e0       	ldi	r17, 0x00	; 0
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <main+0x206>
		else if(a>=832 && a<950)
		distance=1;
 400:	01 e0       	ldi	r16, 0x01	; 1
 402:	10 e0       	ldi	r17, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <main+0x206>
		else if(a>=950)
		distance=0;
 406:	00 e0       	ldi	r16, 0x00	; 0
 408:	10 e0       	ldi	r17, 0x00	; 0
		speed=distance/time;
 40a:	c8 01       	movw	r24, r16
 40c:	be 01       	movw	r22, r28
 40e:	0e 94 40 02 	call	0x480	; 0x480 <__divmodhi4>
 412:	46 2e       	mov	r4, r22
 414:	57 2e       	mov	r5, r23
		dis_cmd(0x1);
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		dis_cmd(0x80);
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_string("Speed");
 422:	80 e6       	ldi	r24, 0x60	; 96
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
		dis_cmd(0xC0);
 42a:	80 ec       	ldi	r24, 0xC0	; 192
 42c:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(speed);
 430:	84 2d       	mov	r24, r4
 432:	95 2d       	mov	r25, r5
 434:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	93 ed       	ldi	r25, 0xD3	; 211
 43c:	20 e3       	ldi	r18, 0x30	; 48
 43e:	81 50       	subi	r24, 0x01	; 1
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	20 40       	sbci	r18, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <main+0x23a>
 446:	00 c0       	rjmp	.+0      	; 0x448 <main+0x244>
 448:	00 00       	nop
	DDRC=0xFF;
	lcd_init();
	ADC_init();
	unsigned int a;
	int distance,time=0,speed;
	while(ADC_read('1')<=950)
 44a:	81 e3       	ldi	r24, 0x31	; 49
 44c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ADC_read>
 450:	87 3b       	cpi	r24, 0xB7	; 183
 452:	93 40       	sbci	r25, 0x03	; 3
 454:	08 f4       	brcc	.+2      	; 0x458 <main+0x254>
 456:	0e cf       	rjmp	.-484    	; 0x274 <main+0x70>
		LCD_string("Speed");
		dis_cmd(0xC0);
		LCD_number(speed);
		_delay_ms(1000);
	}
}  //TODO:: Please write your application code
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	ff 90       	pop	r15
 466:	ef 90       	pop	r14
 468:	df 90       	pop	r13
 46a:	cf 90       	pop	r12
 46c:	bf 90       	pop	r11
 46e:	af 90       	pop	r10
 470:	9f 90       	pop	r9
 472:	8f 90       	pop	r8
 474:	7f 90       	pop	r7
 476:	6f 90       	pop	r6
 478:	5f 90       	pop	r5
 47a:	4f 90       	pop	r4
 47c:	3f 90       	pop	r3
 47e:	08 95       	ret

00000480 <__divmodhi4>:
 480:	97 fb       	bst	r25, 7
 482:	07 2e       	mov	r0, r23
 484:	16 f4       	brtc	.+4      	; 0x48a <__divmodhi4+0xa>
 486:	00 94       	com	r0
 488:	07 d0       	rcall	.+14     	; 0x498 <__divmodhi4_neg1>
 48a:	77 fd       	sbrc	r23, 7
 48c:	09 d0       	rcall	.+18     	; 0x4a0 <__divmodhi4_neg2>
 48e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__udivmodhi4>
 492:	07 fc       	sbrc	r0, 7
 494:	05 d0       	rcall	.+10     	; 0x4a0 <__divmodhi4_neg2>
 496:	3e f4       	brtc	.+14     	; 0x4a6 <__divmodhi4_exit>

00000498 <__divmodhi4_neg1>:
 498:	90 95       	com	r25
 49a:	81 95       	neg	r24
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	08 95       	ret

000004a0 <__divmodhi4_neg2>:
 4a0:	70 95       	com	r23
 4a2:	61 95       	neg	r22
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255

000004a6 <__divmodhi4_exit>:
 4a6:	08 95       	ret

000004a8 <__umulhisi3>:
 4a8:	a2 9f       	mul	r26, r18
 4aa:	b0 01       	movw	r22, r0
 4ac:	b3 9f       	mul	r27, r19
 4ae:	c0 01       	movw	r24, r0
 4b0:	a3 9f       	mul	r26, r19
 4b2:	01 d0       	rcall	.+2      	; 0x4b6 <__umulhisi3+0xe>
 4b4:	b2 9f       	mul	r27, r18
 4b6:	70 0d       	add	r23, r0
 4b8:	81 1d       	adc	r24, r1
 4ba:	11 24       	eor	r1, r1
 4bc:	91 1d       	adc	r25, r1
 4be:	08 95       	ret

000004c0 <__udivmodhi4>:
 4c0:	aa 1b       	sub	r26, r26
 4c2:	bb 1b       	sub	r27, r27
 4c4:	51 e1       	ldi	r21, 0x11	; 17
 4c6:	07 c0       	rjmp	.+14     	; 0x4d6 <__udivmodhi4_ep>

000004c8 <__udivmodhi4_loop>:
 4c8:	aa 1f       	adc	r26, r26
 4ca:	bb 1f       	adc	r27, r27
 4cc:	a6 17       	cp	r26, r22
 4ce:	b7 07       	cpc	r27, r23
 4d0:	10 f0       	brcs	.+4      	; 0x4d6 <__udivmodhi4_ep>
 4d2:	a6 1b       	sub	r26, r22
 4d4:	b7 0b       	sbc	r27, r23

000004d6 <__udivmodhi4_ep>:
 4d6:	88 1f       	adc	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	5a 95       	dec	r21
 4dc:	a9 f7       	brne	.-22     	; 0x4c8 <__udivmodhi4_loop>
 4de:	80 95       	com	r24
 4e0:	90 95       	com	r25
 4e2:	bc 01       	movw	r22, r24
 4e4:	cd 01       	movw	r24, r26
 4e6:	08 95       	ret

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
