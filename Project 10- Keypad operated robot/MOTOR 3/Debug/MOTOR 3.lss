
MOTOR 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000230  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a07  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000528  00000000  00000000  00000a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ec  00000000  00000000  00000fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000138  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000249  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_cmd>:
	cmd1=((abc<<4)&(0xF0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  6c:	85 bb       	out	0x15, r24	; 21
	LCD_port&=~(1<<RS);//RS=0 for command
  6e:	a8 98       	cbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);///rw=0
  70:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);///
  72:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	8f e9       	ldi	r24, 0x9F	; 159
  76:	9f e0       	ldi	r25, 0x0F	; 15
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <LCD_cmd+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <LCD_cmd+0x12>
  7e:	00 00       	nop
	_delay_ms(1);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  80:	aa 98       	cbi	0x15, 2	; 21
  82:	08 95       	ret

00000084 <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  84:	cf 93       	push	r28
  86:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xF0;
	LCD_cmd(cmd1);
  88:	80 7f       	andi	r24, 0xF0	; 240
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
	cmd1=((abc<<4)&(0xF0));
  90:	20 e1       	ldi	r18, 0x10	; 16
  92:	c2 9f       	mul	r28, r18
  94:	c0 01       	movw	r24, r0
  96:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  98:	99 27       	eor	r25, r25
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
}
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  aa:	88 e2       	ldi	r24, 0x28	; 40
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
  c2:	08 95       	ret

000000c4 <key_scan>:

char key_scan()
{
	while(1)
	{
		PORTD=0x0E;
  c4:	8e e0       	ldi	r24, 0x0E	; 14
		{
			while(!(PINA&0x08));
			return('+');
		}
		
		PORTD=0x0D;
  c6:	9d e0       	ldi	r25, 0x0D	; 13
			while(!(PINA&0x08));
			return('=');
		}
		
		
		PORTD=0x0B;
  c8:	2b e0       	ldi	r18, 0x0B	; 11
			while(!(PINA&0x08));
			return('0');
		}
		
		
		PORTD=0x07;
  ca:	37 e0       	ldi	r19, 0x07	; 7

char key_scan()
{
	while(1)
	{
		PORTD=0x0E;
  cc:	82 bb       	out	0x12, r24	; 18
  ce:	ef e1       	ldi	r30, 0x1F	; 31
  d0:	fe e4       	ldi	r31, 0x4E	; 78
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <key_scan+0xe>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <key_scan+0x14>
  d8:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
  da:	c8 99       	sbic	0x19, 0	; 25
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <key_scan+0x22>
		{
			while(!(PINA&0x01));
  de:	c8 9b       	sbis	0x19, 0	; 25
  e0:	fe cf       	rjmp	.-4      	; 0xde <key_scan+0x1a>
			return('/');
  e2:	8f e2       	ldi	r24, 0x2F	; 47
  e4:	08 95       	ret
		}
		if((PINA&0x02)==0)
  e6:	c9 99       	sbic	0x19, 1	; 25
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <key_scan+0x2e>
		{
			while(!(PINA&0x02));
  ea:	c9 9b       	sbis	0x19, 1	; 25
  ec:	fe cf       	rjmp	.-4      	; 0xea <key_scan+0x26>
			return('X');
  ee:	88 e5       	ldi	r24, 0x58	; 88
  f0:	08 95       	ret
		}
		if((PINA&0x04)==0)
  f2:	ca 99       	sbic	0x19, 2	; 25
  f4:	04 c0       	rjmp	.+8      	; 0xfe <key_scan+0x3a>
		{
			while(!(PINA&0x04));
  f6:	ca 9b       	sbis	0x19, 2	; 25
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <key_scan+0x32>
			return('-');
  fa:	8d e2       	ldi	r24, 0x2D	; 45
  fc:	08 95       	ret
		}
		if((PINA&0x08)==0)
  fe:	cb 99       	sbic	0x19, 3	; 25
 100:	04 c0       	rjmp	.+8      	; 0x10a <key_scan+0x46>
		{
			while(!(PINA&0x08));
 102:	cb 9b       	sbis	0x19, 3	; 25
 104:	fe cf       	rjmp	.-4      	; 0x102 <key_scan+0x3e>
			return('+');
 106:	8b e2       	ldi	r24, 0x2B	; 43
 108:	08 95       	ret
		}
		
		PORTD=0x0D;
 10a:	92 bb       	out	0x12, r25	; 18
 10c:	ef e1       	ldi	r30, 0x1F	; 31
 10e:	fe e4       	ldi	r31, 0x4E	; 78
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <key_scan+0x4c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <key_scan+0x52>
 116:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 118:	c8 99       	sbic	0x19, 0	; 25
 11a:	04 c0       	rjmp	.+8      	; 0x124 <key_scan+0x60>
		{
			while(!(PINA&0x01));
 11c:	c8 9b       	sbis	0x19, 0	; 25
 11e:	fe cf       	rjmp	.-4      	; 0x11c <key_scan+0x58>
			return('9');
 120:	89 e3       	ldi	r24, 0x39	; 57
 122:	08 95       	ret
		}
		if((PINA&0x02)==0)
 124:	c9 99       	sbic	0x19, 1	; 25
 126:	04 c0       	rjmp	.+8      	; 0x130 <key_scan+0x6c>
		{
			while(!(PINA&0x02));
 128:	c9 9b       	sbis	0x19, 1	; 25
 12a:	fe cf       	rjmp	.-4      	; 0x128 <key_scan+0x64>
			return('6');
 12c:	86 e3       	ldi	r24, 0x36	; 54
 12e:	08 95       	ret
		}
		if((PINA&0x04)==0)
 130:	ca 99       	sbic	0x19, 2	; 25
 132:	04 c0       	rjmp	.+8      	; 0x13c <key_scan+0x78>
		{
			while(!(PINA&0x04));
 134:	ca 9b       	sbis	0x19, 2	; 25
 136:	fe cf       	rjmp	.-4      	; 0x134 <key_scan+0x70>
			return('3');
 138:	83 e3       	ldi	r24, 0x33	; 51
 13a:	08 95       	ret
		}
		if((PINA&0x08)==0)
 13c:	cb 99       	sbic	0x19, 3	; 25
 13e:	04 c0       	rjmp	.+8      	; 0x148 <key_scan+0x84>
		{
			while(!(PINA&0x08));
 140:	cb 9b       	sbis	0x19, 3	; 25
 142:	fe cf       	rjmp	.-4      	; 0x140 <key_scan+0x7c>
			return('=');
 144:	8d e3       	ldi	r24, 0x3D	; 61
 146:	08 95       	ret
		}
		
		
		PORTD=0x0B;
 148:	22 bb       	out	0x12, r18	; 18
 14a:	ef e1       	ldi	r30, 0x1F	; 31
 14c:	fe e4       	ldi	r31, 0x4E	; 78
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <key_scan+0x8a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <key_scan+0x90>
 154:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 156:	c8 99       	sbic	0x19, 0	; 25
 158:	04 c0       	rjmp	.+8      	; 0x162 <key_scan+0x9e>
		{
			while(!(PINA&0x01));
 15a:	c8 9b       	sbis	0x19, 0	; 25
 15c:	fe cf       	rjmp	.-4      	; 0x15a <key_scan+0x96>
			return('8');
 15e:	88 e3       	ldi	r24, 0x38	; 56
 160:	08 95       	ret
		}
		if((PINA&0x02)==0)
 162:	c9 99       	sbic	0x19, 1	; 25
 164:	04 c0       	rjmp	.+8      	; 0x16e <key_scan+0xaa>
		{
			while(!(PINA&0x02));
 166:	c9 9b       	sbis	0x19, 1	; 25
 168:	fe cf       	rjmp	.-4      	; 0x166 <key_scan+0xa2>
			return('5');
 16a:	85 e3       	ldi	r24, 0x35	; 53
 16c:	08 95       	ret
		}
		if((PINA&0x04)==0)
 16e:	ca 99       	sbic	0x19, 2	; 25
 170:	04 c0       	rjmp	.+8      	; 0x17a <key_scan+0xb6>
		{
			while(!(PINA&0x04));
 172:	ca 9b       	sbis	0x19, 2	; 25
 174:	fe cf       	rjmp	.-4      	; 0x172 <key_scan+0xae>
			return('2');
 176:	82 e3       	ldi	r24, 0x32	; 50
 178:	08 95       	ret
		}
		if((PINA&0x08)==0)
 17a:	cb 99       	sbic	0x19, 3	; 25
 17c:	04 c0       	rjmp	.+8      	; 0x186 <key_scan+0xc2>
		{
			while(!(PINA&0x08));
 17e:	cb 9b       	sbis	0x19, 3	; 25
 180:	fe cf       	rjmp	.-4      	; 0x17e <key_scan+0xba>
			return('0');
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	08 95       	ret
		}
		
		
		PORTD=0x07;
 186:	32 bb       	out	0x12, r19	; 18
 188:	ef e1       	ldi	r30, 0x1F	; 31
 18a:	fe e4       	ldi	r31, 0x4E	; 78
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <key_scan+0xc8>
 190:	00 c0       	rjmp	.+0      	; 0x192 <key_scan+0xce>
 192:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 194:	c8 99       	sbic	0x19, 0	; 25
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <key_scan+0xdc>
		{
			while(!(PINA&0x01));
 198:	c8 9b       	sbis	0x19, 0	; 25
 19a:	fe cf       	rjmp	.-4      	; 0x198 <key_scan+0xd4>
			return('7');
 19c:	87 e3       	ldi	r24, 0x37	; 55
 19e:	08 95       	ret
		}
		if((PINA&0x02)==0)
 1a0:	c9 99       	sbic	0x19, 1	; 25
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <key_scan+0xe8>
		{
			while(!(PINA&0x02));
 1a4:	c9 9b       	sbis	0x19, 1	; 25
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <key_scan+0xe0>
			return('4');
 1a8:	84 e3       	ldi	r24, 0x34	; 52
 1aa:	08 95       	ret
		}
		if((PINA&0x04)==0)
 1ac:	ca 99       	sbic	0x19, 2	; 25
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <key_scan+0xf4>
		{
			while(!(PINA&0x04));
 1b0:	ca 9b       	sbis	0x19, 2	; 25
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <key_scan+0xec>
			return('1');
 1b4:	81 e3       	ldi	r24, 0x31	; 49
 1b6:	08 95       	ret
		}
		if((PINA&0x08)==0)
 1b8:	cb 99       	sbic	0x19, 3	; 25
 1ba:	88 cf       	rjmp	.-240    	; 0xcc <key_scan+0x8>
		{
			while(!(PINA&0x08));
 1bc:	cb 9b       	sbis	0x19, 3	; 25
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <key_scan+0xf8>
			return('C');
 1c0:	83 e4       	ldi	r24, 0x43	; 67
		}
	}
}
 1c2:	08 95       	ret

000001c4 <main>:


int main(void)
{
	unsigned char a;
	DDRC=0xFF;
 1c4:	cf ef       	ldi	r28, 0xFF	; 255
 1c6:	c4 bb       	out	0x14, r28	; 20
	DDRB=0xFF;
 1c8:	c7 bb       	out	0x17, r28	; 23
	DDRA=0x00;
 1ca:	1a ba       	out	0x1a, r1	; 26
	DDRD=0xFF;
 1cc:	c1 bb       	out	0x11, r28	; 17
	lcd_init();
 1ce:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_init>
	PORTA=0xFF;
 1d2:	cb bb       	out	0x1b, r28	; 27
	PORTD=0x00;
 1d4:	12 ba       	out	0x12, r1	; 18
	PORTB=0x00;
 1d6:	18 ba       	out	0x18, r1	; 24
	
	while(1)
	{
		a=key_scan();
		if(a=='8')
		PORTB=0x09;
 1d8:	c9 e0       	ldi	r28, 0x09	; 9
		{PORTB=0x05;
		 _delay_ms(1000);
		 PORTB=0x09;
		 }
		else if(a=='6')
		{PORTB=0x0A;
 1da:	1a e0       	ldi	r17, 0x0A	; 10
		if(a=='8')
		PORTB=0x09;
		else if(a=='2')
		PORTB=0x06;
		else if(a=='4')
		{PORTB=0x05;
 1dc:	05 e0       	ldi	r16, 0x05	; 5
	{
		a=key_scan();
		if(a=='8')
		PORTB=0x09;
		else if(a=='2')
		PORTB=0x06;
 1de:	d6 e0       	ldi	r29, 0x06	; 6
	PORTB=0x00;
	
	
	while(1)
	{
		a=key_scan();
 1e0:	0e 94 62 00 	call	0xc4	; 0xc4 <key_scan>
		if(a=='8')
 1e4:	88 33       	cpi	r24, 0x38	; 56
 1e6:	11 f4       	brne	.+4      	; 0x1ec <main+0x28>
		PORTB=0x09;
 1e8:	c8 bb       	out	0x18, r28	; 24
 1ea:	fa cf       	rjmp	.-12     	; 0x1e0 <main+0x1c>
		else if(a=='2')
 1ec:	82 33       	cpi	r24, 0x32	; 50
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <main+0x30>
		PORTB=0x06;
 1f0:	d8 bb       	out	0x18, r29	; 24
 1f2:	f6 cf       	rjmp	.-20     	; 0x1e0 <main+0x1c>
		else if(a=='4')
 1f4:	84 33       	cpi	r24, 0x34	; 52
 1f6:	61 f4       	brne	.+24     	; 0x210 <main+0x4c>
		{PORTB=0x05;
 1f8:	08 bb       	out	0x18, r16	; 24
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	83 ed       	ldi	r24, 0xD3	; 211
 1fe:	90 e3       	ldi	r25, 0x30	; 48
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x3c>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x46>
 20a:	00 00       	nop
		 _delay_ms(1000);
		 PORTB=0x09;
 20c:	c8 bb       	out	0x18, r28	; 24
 20e:	e8 cf       	rjmp	.-48     	; 0x1e0 <main+0x1c>
		 }
		else if(a=='6')
 210:	86 33       	cpi	r24, 0x36	; 54
 212:	31 f7       	brne	.-52     	; 0x1e0 <main+0x1c>
		{PORTB=0x0A;
 214:	18 bb       	out	0x18, r17	; 24
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	83 ed       	ldi	r24, 0xD3	; 211
 21a:	90 e3       	ldi	r25, 0x30	; 48
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x58>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x62>
 226:	00 00       	nop
		 _delay_ms(1000);
		 PORTB=0x09;
 228:	c8 bb       	out	0x18, r28	; 24
 22a:	da cf       	rjmp	.-76     	; 0x1e0 <main+0x1c>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
