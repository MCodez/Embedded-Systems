
MOTOR 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000973  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000047c  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b1  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000239  00000000  00000000  0000101f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000143  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e3  00000000  00000000  0000143b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000161e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 94 00 	call	0x128	; 0x128 <main>
  7a:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
	cmd1=((abc<<4)&(0xf0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  82:	85 bb       	out	0x15, r24	; 21
	LCD_port&=~(1<<RS);//RS=0 for command
  84:	a8 98       	cbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);///rw=0
  86:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);///
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	83 ec       	ldi	r24, 0xC3	; 195
  8c:	99 e0       	ldi	r25, 0x09	; 9
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmd+0x12>
  94:	00 00       	nop
	_delay_ms(10);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  96:	aa 98       	cbi	0x15, 2	; 21
  98:	08 95       	ret

0000009a <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xf0;
	LCD_cmd(cmd1);
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	cmd1=((abc<<4)&(0xf0));
  a6:	20 e1       	ldi	r18, 0x10	; 16
  a8:	c2 9f       	mul	r28, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  ae:	99 27       	eor	r25, r25
  b0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  c0:	88 e2       	ldi	r24, 0x28	; 40
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
  d8:	08 95       	ret

000000da <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  da:	85 bb       	out	0x15, r24	; 21
	LCD_port|=(1<<RS);
  dc:	a8 9a       	sbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);
  de:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);
  e0:	aa 9a       	sbi	0x15, 2	; 21
  e2:	83 ec       	ldi	r24, 0xC3	; 195
  e4:	99 e0       	ldi	r25, 0x09	; 9
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_data+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_data+0x12>
  ec:	00 00       	nop
	_delay_ms(10);
	LCD_port&=~(1<<EN);
  ee:	aa 98       	cbi	0x15, 2	; 21
  f0:	08 95       	ret

000000f2 <dis_data>:
}

void dis_data(unsigned char abc)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
  fc:	8c 2f       	mov	r24, r28
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_string>:

void LCD_string(unsigned char *str)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!='\0')
 110:	88 81       	ld	r24, Y
 112:	88 23       	and	r24, r24
 114:	31 f0       	breq	.+12     	; 0x122 <LCD_string+0x18>
	LCD_data(data1);
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}

void LCD_string(unsigned char *str)
 116:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!='\0')
	{	dis_data(str[i]);
 118:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
}

void LCD_string(unsigned char *str)
{
	int i;
	while(str[i]!='\0')
 11c:	89 91       	ld	r24, Y+
 11e:	81 11       	cpse	r24, r1
 120:	fb cf       	rjmp	.-10     	; 0x118 <LCD_string+0xe>
	{	dis_data(str[i]);
		i++;
	}

}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <main>:


int main(void)
{
    DDRB=0xFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;
 12c:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 12e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
	
	while(1)
    {
     PORTB=0x09;
 132:	d9 e0       	ldi	r29, 0x09	; 9
	 
	 dis_cmd(0x80);
	 LCD_string("CLOCKWISE");
	 _delay_ms(30000);
	 PORTB=0x06;
 134:	c6 e0       	ldi	r28, 0x06	; 6
	DDRC=0xFF;
	lcd_init();
	
	while(1)
    {
     PORTB=0x09;
 136:	d8 bb       	out	0x18, r29	; 24
	 
	 dis_cmd(0x80);
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	 LCD_string("CLOCKWISE");
 13e:	84 e6       	ldi	r24, 0x64	; 100
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 146:	2f e7       	ldi	r18, 0x7F	; 127
 148:	8d e8       	ldi	r24, 0x8D	; 141
 14a:	9b e5       	ldi	r25, 0x5B	; 91
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x24>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x2e>
 156:	00 00       	nop
	 _delay_ms(30000);
	 PORTB=0x06;
 158:	c8 bb       	out	0x18, r28	; 24
	 dis_cmd(0x1);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	 dis_cmd(0x80);
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	 LCD_string("ANTICLOCKWISE");
 166:	80 e6       	ldi	r24, 0x60	; 96
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 16e:	2f e7       	ldi	r18, 0x7F	; 127
 170:	8d e8       	ldi	r24, 0x8D	; 141
 172:	9b e5       	ldi	r25, 0x5B	; 91
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x4c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x56>
 17e:	00 00       	nop
	  _delay_ms(30000);
	  dis_cmd(0x1);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
 186:	d7 cf       	rjmp	.-82     	; 0x136 <main+0xe>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
