
spy bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000104  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000198  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000146  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b6  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000138  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000055  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

void ADC_init(void)
{
	ADMUX=(1<<REFS0);
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  70:	87 e8       	ldi	r24, 0x87	; 135
  72:	86 b9       	out	0x06, r24	; 6
  74:	08 95       	ret

00000076 <ADC_read>:
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
	ADMUX|=ch;
  76:	97 b1       	in	r25, 0x07	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
  78:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
  7a:	98 2b       	or	r25, r24
  7c:	97 b9       	out	0x07, r25	; 7
	ADCSRA|=(1<<ADSC);
  7e:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)));
  80:	34 9b       	sbis	0x06, 4	; 6
  82:	fe cf       	rjmp	.-4      	; 0x80 <ADC_read+0xa>
	ADCSRA|=(1<<ADIF);
  84:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
  86:	24 b1       	in	r18, 0x04	; 4
  88:	35 b1       	in	r19, 0x05	; 5
}
  8a:	82 2f       	mov	r24, r18
  8c:	93 2f       	mov	r25, r19
  8e:	08 95       	ret

00000090 <main>:


int main(void)
{
	DDRA=0x00;
  90:	1a ba       	out	0x1a, r1	; 26
	DDRB=0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	ADC_init();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	unsigned int a;
	while(1)
	{
		a=ADC_read('0');
		if(a>180 && a<=320)
		PORTB=0x01;
  9a:	ff 24       	eor	r15, r15
  9c:	f3 94       	inc	r15
		if(a>320 && a<=400)
		PORTB=0x04;
  9e:	04 e0       	ldi	r16, 0x04	; 4
		if(a>400 && a<=500)
		PORTB=0x02;
  a0:	12 e0       	ldi	r17, 0x02	; 2
		if(a>550 && a<=600)
		PORTB=0x06;
  a2:	d6 e0       	ldi	r29, 0x06	; 6
		if(a>600)
		PORTB=0x07;
  a4:	c7 e0       	ldi	r28, 0x07	; 7
	DDRB=0xFF;
	ADC_init();
	unsigned int a;
	while(1)
	{
		a=ADC_read('0');
  a6:	80 e3       	ldi	r24, 0x30	; 48
  a8:	0e 94 3b 00 	call	0x76	; 0x76 <ADC_read>
		if(a>180 && a<=320)
  ac:	9c 01       	movw	r18, r24
  ae:	25 5b       	subi	r18, 0xB5	; 181
  b0:	31 09       	sbc	r19, r1
  b2:	2c 38       	cpi	r18, 0x8C	; 140
  b4:	31 05       	cpc	r19, r1
  b6:	08 f4       	brcc	.+2      	; 0xba <main+0x2a>
		PORTB=0x01;
  b8:	f8 ba       	out	0x18, r15	; 24
		if(a>320 && a<=400)
  ba:	9c 01       	movw	r18, r24
  bc:	21 54       	subi	r18, 0x41	; 65
  be:	31 40       	sbci	r19, 0x01	; 1
  c0:	20 35       	cpi	r18, 0x50	; 80
  c2:	31 05       	cpc	r19, r1
  c4:	08 f4       	brcc	.+2      	; 0xc8 <main+0x38>
		PORTB=0x04;
  c6:	08 bb       	out	0x18, r16	; 24
		if(a>400 && a<=500)
  c8:	9c 01       	movw	r18, r24
  ca:	21 59       	subi	r18, 0x91	; 145
  cc:	31 40       	sbci	r19, 0x01	; 1
  ce:	24 36       	cpi	r18, 0x64	; 100
  d0:	31 05       	cpc	r19, r1
  d2:	08 f4       	brcc	.+2      	; 0xd6 <main+0x46>
		PORTB=0x02;
  d4:	18 bb       	out	0x18, r17	; 24
		if(a>550 && a<=600)
  d6:	9c 01       	movw	r18, r24
  d8:	27 52       	subi	r18, 0x27	; 39
  da:	32 40       	sbci	r19, 0x02	; 2
  dc:	22 33       	cpi	r18, 0x32	; 50
  de:	31 05       	cpc	r19, r1
  e0:	08 f4       	brcc	.+2      	; 0xe4 <main+0x54>
		PORTB=0x06;
  e2:	d8 bb       	out	0x18, r29	; 24
		if(a>600)
  e4:	89 35       	cpi	r24, 0x59	; 89
  e6:	92 40       	sbci	r25, 0x02	; 2
  e8:	08 f0       	brcs	.+2      	; 0xec <main+0x5c>
		PORTB=0x07;
  ea:	c8 bb       	out	0x18, r28	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	93 ed       	ldi	r25, 0xD3	; 211
  f0:	20 e3       	ldi	r18, 0x30	; 48
  f2:	81 50       	subi	r24, 0x01	; 1
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	20 40       	sbci	r18, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x62>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x6c>
  fc:	00 00       	nop
  fe:	d3 cf       	rjmp	.-90     	; 0xa6 <main+0x16>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
