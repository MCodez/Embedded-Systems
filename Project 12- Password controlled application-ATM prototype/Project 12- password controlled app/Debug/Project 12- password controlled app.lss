
Project 12- password controlled app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  0000034a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000b53  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000064a  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000227  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000314  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b5  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037c  00000000  00000000  00001a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001d81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 14 01 	call	0x228	; 0x228 <main>
  7a:	0c 94 a3 01 	jmp	0x346	; 0x346 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
	cmd1=((abc<<4)&(0xf0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  82:	85 bb       	out	0x15, r24	; 21
	LCD_port&=~(1<<RS);//RS=0 for command
  84:	a8 98       	cbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);///rw=0
  86:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);///
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	83 ec       	ldi	r24, 0xC3	; 195
  8c:	99 e0       	ldi	r25, 0x09	; 9
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmd+0x12>
  94:	00 00       	nop
	_delay_ms(10);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  96:	aa 98       	cbi	0x15, 2	; 21
  98:	08 95       	ret

0000009a <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xf0;
	LCD_cmd(cmd1);
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	cmd1=((abc<<4)&(0xf0));
  a6:	20 e1       	ldi	r18, 0x10	; 16
  a8:	c2 9f       	mul	r28, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  ae:	99 27       	eor	r25, r25
  b0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  c0:	88 e2       	ldi	r24, 0x28	; 40
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
  d8:	08 95       	ret

000000da <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  da:	85 bb       	out	0x15, r24	; 21
	LCD_port|=(1<<RS);
  dc:	a8 9a       	sbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);
  de:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);
  e0:	aa 9a       	sbi	0x15, 2	; 21
  e2:	83 ec       	ldi	r24, 0xC3	; 195
  e4:	99 e0       	ldi	r25, 0x09	; 9
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_data+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_data+0x12>
  ec:	00 00       	nop
	_delay_ms(10);
	LCD_port&=~(1<<EN);
  ee:	aa 98       	cbi	0x15, 2	; 21
  f0:	08 95       	ret

000000f2 <dis_data>:
}

void dis_data(unsigned char abc)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
  fc:	8c 2f       	mov	r24, r28
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_string>:

void LCD_string(unsigned char *str)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!='\0')
 110:	88 81       	ld	r24, Y
 112:	88 23       	and	r24, r24
 114:	31 f0       	breq	.+12     	; 0x122 <LCD_string+0x18>
	LCD_data(data1);
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}

void LCD_string(unsigned char *str)
 116:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!='\0')
	{	dis_data(str[i]);
 118:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
}

void LCD_string(unsigned char *str)
{
	int i;
	while(str[i]!='\0')
 11c:	89 91       	ld	r24, Y+
 11e:	81 11       	cpse	r24, r1
 120:	fb cf       	rjmp	.-10     	; 0x118 <LCD_string+0xe>
	{	dis_data(str[i]);
		i++;
	}

}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <key_scan>:

char key_scan()
{
	while(1)
	{
		PORTD=0x0E;
 128:	8e e0       	ldi	r24, 0x0E	; 14
		{
			while(!(PINA&0x08));
			return('+');
		}
		
		PORTD=0x0D;
 12a:	9d e0       	ldi	r25, 0x0D	; 13
			while(!(PINA&0x08));
			return('=');
		}
		
		
		PORTD=0x0B;
 12c:	2b e0       	ldi	r18, 0x0B	; 11
			while(!(PINA&0x08));
			return('0');
		}
		
		
		PORTD=0x07;
 12e:	37 e0       	ldi	r19, 0x07	; 7

char key_scan()
{
	while(1)
	{
		PORTD=0x0E;
 130:	82 bb       	out	0x12, r24	; 18
 132:	e1 ee       	ldi	r30, 0xE1	; 225
 134:	f4 e0       	ldi	r31, 0x04	; 4
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <key_scan+0xe>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <key_scan+0x14>
 13c:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 13e:	c8 99       	sbic	0x19, 0	; 25
 140:	04 c0       	rjmp	.+8      	; 0x14a <key_scan+0x22>
		{
			while(!(PINA&0x01));
 142:	c8 9b       	sbis	0x19, 0	; 25
 144:	fe cf       	rjmp	.-4      	; 0x142 <key_scan+0x1a>
			return('/');
 146:	8f e2       	ldi	r24, 0x2F	; 47
 148:	08 95       	ret
		}
		if((PINA&0x02)==0)
 14a:	c9 99       	sbic	0x19, 1	; 25
 14c:	04 c0       	rjmp	.+8      	; 0x156 <key_scan+0x2e>
		{
			while(!(PINA&0x02));
 14e:	c9 9b       	sbis	0x19, 1	; 25
 150:	fe cf       	rjmp	.-4      	; 0x14e <key_scan+0x26>
			return('X');
 152:	88 e5       	ldi	r24, 0x58	; 88
 154:	08 95       	ret
		}
		if((PINA&0x04)==0)
 156:	ca 99       	sbic	0x19, 2	; 25
 158:	04 c0       	rjmp	.+8      	; 0x162 <key_scan+0x3a>
		{
			while(!(PINA&0x04));
 15a:	ca 9b       	sbis	0x19, 2	; 25
 15c:	fe cf       	rjmp	.-4      	; 0x15a <key_scan+0x32>
			return('-');
 15e:	8d e2       	ldi	r24, 0x2D	; 45
 160:	08 95       	ret
		}
		if((PINA&0x08)==0)
 162:	cb 99       	sbic	0x19, 3	; 25
 164:	04 c0       	rjmp	.+8      	; 0x16e <key_scan+0x46>
		{
			while(!(PINA&0x08));
 166:	cb 9b       	sbis	0x19, 3	; 25
 168:	fe cf       	rjmp	.-4      	; 0x166 <key_scan+0x3e>
			return('+');
 16a:	8b e2       	ldi	r24, 0x2B	; 43
 16c:	08 95       	ret
		}
		
		PORTD=0x0D;
 16e:	92 bb       	out	0x12, r25	; 18
 170:	e1 ee       	ldi	r30, 0xE1	; 225
 172:	f4 e0       	ldi	r31, 0x04	; 4
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <key_scan+0x4c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <key_scan+0x52>
 17a:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 17c:	c8 99       	sbic	0x19, 0	; 25
 17e:	04 c0       	rjmp	.+8      	; 0x188 <key_scan+0x60>
		{
			while(!(PINA&0x01));
 180:	c8 9b       	sbis	0x19, 0	; 25
 182:	fe cf       	rjmp	.-4      	; 0x180 <key_scan+0x58>
			return('9');
 184:	89 e3       	ldi	r24, 0x39	; 57
 186:	08 95       	ret
		}
		if((PINA&0x02)==0)
 188:	c9 99       	sbic	0x19, 1	; 25
 18a:	04 c0       	rjmp	.+8      	; 0x194 <key_scan+0x6c>
		{
			while(!(PINA&0x02));
 18c:	c9 9b       	sbis	0x19, 1	; 25
 18e:	fe cf       	rjmp	.-4      	; 0x18c <key_scan+0x64>
			return('6');
 190:	86 e3       	ldi	r24, 0x36	; 54
 192:	08 95       	ret
		}
		if((PINA&0x04)==0)
 194:	ca 99       	sbic	0x19, 2	; 25
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <key_scan+0x78>
		{
			while(!(PINA&0x04));
 198:	ca 9b       	sbis	0x19, 2	; 25
 19a:	fe cf       	rjmp	.-4      	; 0x198 <key_scan+0x70>
			return('3');
 19c:	83 e3       	ldi	r24, 0x33	; 51
 19e:	08 95       	ret
		}
		if((PINA&0x08)==0)
 1a0:	cb 99       	sbic	0x19, 3	; 25
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <key_scan+0x84>
		{
			while(!(PINA&0x08));
 1a4:	cb 9b       	sbis	0x19, 3	; 25
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <key_scan+0x7c>
			return('=');
 1a8:	8d e3       	ldi	r24, 0x3D	; 61
 1aa:	08 95       	ret
		}
		
		
		PORTD=0x0B;
 1ac:	22 bb       	out	0x12, r18	; 18
 1ae:	e1 ee       	ldi	r30, 0xE1	; 225
 1b0:	f4 e0       	ldi	r31, 0x04	; 4
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <key_scan+0x8a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <key_scan+0x90>
 1b8:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 1ba:	c8 99       	sbic	0x19, 0	; 25
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <key_scan+0x9e>
		{
			while(!(PINA&0x01));
 1be:	c8 9b       	sbis	0x19, 0	; 25
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <key_scan+0x96>
			return('8');
 1c2:	88 e3       	ldi	r24, 0x38	; 56
 1c4:	08 95       	ret
		}
		if((PINA&0x02)==0)
 1c6:	c9 99       	sbic	0x19, 1	; 25
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <key_scan+0xaa>
		{
			while(!(PINA&0x02));
 1ca:	c9 9b       	sbis	0x19, 1	; 25
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <key_scan+0xa2>
			return('5');
 1ce:	85 e3       	ldi	r24, 0x35	; 53
 1d0:	08 95       	ret
		}
		if((PINA&0x04)==0)
 1d2:	ca 99       	sbic	0x19, 2	; 25
 1d4:	04 c0       	rjmp	.+8      	; 0x1de <key_scan+0xb6>
		{
			while(!(PINA&0x04));
 1d6:	ca 9b       	sbis	0x19, 2	; 25
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <key_scan+0xae>
			return('2');
 1da:	82 e3       	ldi	r24, 0x32	; 50
 1dc:	08 95       	ret
		}
		if((PINA&0x08)==0)
 1de:	cb 99       	sbic	0x19, 3	; 25
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <key_scan+0xc2>
		{
			while(!(PINA&0x08));
 1e2:	cb 9b       	sbis	0x19, 3	; 25
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <key_scan+0xba>
			return('0');
 1e6:	80 e3       	ldi	r24, 0x30	; 48
 1e8:	08 95       	ret
		}
		
		
		PORTD=0x07;
 1ea:	32 bb       	out	0x12, r19	; 18
 1ec:	e1 ee       	ldi	r30, 0xE1	; 225
 1ee:	f4 e0       	ldi	r31, 0x04	; 4
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <key_scan+0xc8>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <key_scan+0xce>
 1f6:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 1f8:	c8 99       	sbic	0x19, 0	; 25
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <key_scan+0xdc>
		{
			while(!(PINA&0x01));
 1fc:	c8 9b       	sbis	0x19, 0	; 25
 1fe:	fe cf       	rjmp	.-4      	; 0x1fc <key_scan+0xd4>
			return('7');
 200:	87 e3       	ldi	r24, 0x37	; 55
 202:	08 95       	ret
		}
		if((PINA&0x02)==0)
 204:	c9 99       	sbic	0x19, 1	; 25
 206:	04 c0       	rjmp	.+8      	; 0x210 <key_scan+0xe8>
		{
			while(!(PINA&0x02));
 208:	c9 9b       	sbis	0x19, 1	; 25
 20a:	fe cf       	rjmp	.-4      	; 0x208 <key_scan+0xe0>
			return('4');
 20c:	84 e3       	ldi	r24, 0x34	; 52
 20e:	08 95       	ret
		}
		if((PINA&0x04)==0)
 210:	ca 99       	sbic	0x19, 2	; 25
 212:	04 c0       	rjmp	.+8      	; 0x21c <key_scan+0xf4>
		{
			while(!(PINA&0x04));
 214:	ca 9b       	sbis	0x19, 2	; 25
 216:	fe cf       	rjmp	.-4      	; 0x214 <key_scan+0xec>
			return('1');
 218:	81 e3       	ldi	r24, 0x31	; 49
 21a:	08 95       	ret
		}
		if((PINA&0x08)==0)
 21c:	cb 99       	sbic	0x19, 3	; 25
 21e:	88 cf       	rjmp	.-240    	; 0x130 <key_scan+0x8>
		{
			while(!(PINA&0x08));
 220:	cb 9b       	sbis	0x19, 3	; 25
 222:	fe cf       	rjmp	.-4      	; 0x220 <key_scan+0xf8>
			return('C');
 224:	83 e4       	ldi	r24, 0x43	; 67
		}
	}
}
 226:	08 95       	ret

00000228 <main>:

int main(void)
{
 228:	9f 92       	push	r9
 22a:	af 92       	push	r10
 22c:	bf 92       	push	r11
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	00 d0       	rcall	.+0      	; 0x240 <main+0x18>
 240:	00 d0       	rcall	.+0      	; 0x242 <main+0x1a>
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x00;
 246:	1a ba       	out	0x1a, r1	; 26
	DDRD=0xFF;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	81 bb       	out	0x11, r24	; 17
	PORTA=0xFF;
 24c:	8b bb       	out	0x1b, r24	; 27
	PORTD=0x00;
 24e:	12 ba       	out	0x12, r1	; 18
	DDRC=0xFF;
 250:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 252:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
	int i,flag=1;
	char A[4];
	char pass[4]="1234";
 256:	90 90 63 00 	lds	r9, 0x0063
			return('C');
		}
	}
}

int main(void)
 25a:	7e 01       	movw	r14, r28
 25c:	25 e0       	ldi	r18, 0x05	; 5
 25e:	e2 0e       	add	r14, r18
 260:	f1 1c       	adc	r15, r1
			
		}
		
		for(i=0;i<4;i++)
		{
			if(A[i]==pass[i])
 262:	cc 24       	eor	r12, r12
 264:	c3 94       	inc	r12
 266:	d1 2c       	mov	r13, r1
 268:	a1 2c       	mov	r10, r1
 26a:	b1 2c       	mov	r11, r1
	int i,flag=1;
	char A[4];
	char pass[4]="1234";
	while(flag==1)
	{
		dis_cmd(0x1);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		dis_cmd(0x80);
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_string("Enter password");
 278:	85 e6       	ldi	r24, 0x65	; 101
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
		dis_cmd(0xC0);
 280:	80 ec       	ldi	r24, 0xC0	; 192
 282:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
 286:	8e 01       	movw	r16, r28
 288:	0f 5f       	subi	r16, 0xFF	; 255
 28a:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<4;i++)
		{
			A[i]=key_scan();
 28c:	0e 94 94 00 	call	0x128	; 0x128 <key_scan>
 290:	f8 01       	movw	r30, r16
 292:	81 93       	st	Z+, r24
 294:	8f 01       	movw	r16, r30
			dis_data('*');
 296:	8a e2       	ldi	r24, 0x2A	; 42
 298:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
 29c:	ff e3       	ldi	r31, 0x3F	; 63
 29e:	2d e0       	ldi	r18, 0x0D	; 13
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	f1 50       	subi	r31, 0x01	; 1
 2a4:	20 40       	sbci	r18, 0x00	; 0
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x7a>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x84>
 2ac:	00 00       	nop
	{
		dis_cmd(0x1);
		dis_cmd(0x80);
		LCD_string("Enter password");
		dis_cmd(0xC0);
		for(i=0;i<4;i++)
 2ae:	0e 15       	cp	r16, r14
 2b0:	1f 05       	cpc	r17, r15
 2b2:	61 f7       	brne	.-40     	; 0x28c <main+0x64>
			
		}
		
		for(i=0;i<4;i++)
		{
			if(A[i]==pass[i])
 2b4:	9c 2d       	mov	r25, r12
 2b6:	8d 2d       	mov	r24, r13
 2b8:	2c 81       	ldd	r18, Y+4	; 0x04
 2ba:	29 11       	cpse	r18, r9
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <main+0x9a>
 2be:	9a 2d       	mov	r25, r10
 2c0:	8b 2d       	mov	r24, r11
			flag=0;
 2c2:	09 2f       	mov	r16, r25
 2c4:	18 2f       	mov	r17, r24
			else
			flag=1;
		}
		if(flag==0)
 2c6:	01 15       	cp	r16, r1
 2c8:	11 05       	cpc	r17, r1
 2ca:	a1 f4       	brne	.+40     	; 0x2f4 <main+0xcc>
		{
			dis_cmd(0x1);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 2d2:	80 e8       	ldi	r24, 0x80	; 128
 2d4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			LCD_string("Access Granted");
 2d8:	84 e7       	ldi	r24, 0x74	; 116
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 2e0:	9f ef       	ldi	r25, 0xFF	; 255
 2e2:	e8 e0       	ldi	r30, 0x08	; 8
 2e4:	fd e3       	ldi	r31, 0x3D	; 61
 2e6:	91 50       	subi	r25, 0x01	; 1
 2e8:	e0 40       	sbci	r30, 0x00	; 0
 2ea:	f0 40       	sbci	r31, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0xbe>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0xc8>
 2f0:	00 00       	nop
 2f2:	17 c0       	rjmp	.+46     	; 0x322 <main+0xfa>
		}
		else
		{
			dis_cmd(0x1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 2fa:	80 e8       	ldi	r24, 0x80	; 128
 2fc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			LCD_string("Access Denied");
 300:	83 e8       	ldi	r24, 0x83	; 131
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	88 e0       	ldi	r24, 0x08	; 8
 30c:	9d e3       	ldi	r25, 0x3D	; 61
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0xe6>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0xf0>
 318:	00 00       	nop
	DDRC=0xFF;
	lcd_init();
	int i,flag=1;
	char A[4];
	char pass[4]="1234";
	while(flag==1)
 31a:	01 30       	cpi	r16, 0x01	; 1
 31c:	11 05       	cpc	r17, r1
 31e:	09 f4       	brne	.+2      	; 0x322 <main+0xfa>
 320:	a5 cf       	rjmp	.-182    	; 0x26c <main+0x44>
		}
		_delay_ms(20000);
	}
	//TODO:: Please write your application code
	
}
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	bf 90       	pop	r11
 340:	af 90       	pop	r10
 342:	9f 90       	pop	r9
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
