
Practical 20- ON or OFF LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000188  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000095f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000229  00000000  00000000  000009b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000124  00000000  00000000  00000bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023d  00000000  00000000  00000d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000133  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000014  00000000  00000000  000010a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000010bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  64:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <key_scan>:

char key_scan()
{
	while(1)
	{
		PORTD=0x0E;
  6c:	8e e0       	ldi	r24, 0x0E	; 14
		{
			while(!(PINA&0x08));
			return('+');
		}
		
		PORTD=0x0D;
  6e:	9d e0       	ldi	r25, 0x0D	; 13
			while(!(PINA&0x08));
			return('=');
		}
		
		
		PORTD=0x0B;
  70:	2b e0       	ldi	r18, 0x0B	; 11
			while(!(PINA&0x08));
			return('0');
		}
		
		
		PORTD=0x07;
  72:	37 e0       	ldi	r19, 0x07	; 7

char key_scan()
{
	while(1)
	{
		PORTD=0x0E;
  74:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	e1 ee       	ldi	r30, 0xE1	; 225
  78:	f4 e0       	ldi	r31, 0x04	; 4
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <key_scan+0xe>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <key_scan+0x14>
  80:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
  82:	c8 99       	sbic	0x19, 0	; 25
  84:	04 c0       	rjmp	.+8      	; 0x8e <key_scan+0x22>
		{
			while(!(PINA&0x01));
  86:	c8 9b       	sbis	0x19, 0	; 25
  88:	fe cf       	rjmp	.-4      	; 0x86 <key_scan+0x1a>
			return('/');
  8a:	8f e2       	ldi	r24, 0x2F	; 47
  8c:	08 95       	ret
		}
		if((PINA&0x02)==0)
  8e:	c9 99       	sbic	0x19, 1	; 25
  90:	04 c0       	rjmp	.+8      	; 0x9a <key_scan+0x2e>
		{
			while(!(PINA&0x02));
  92:	c9 9b       	sbis	0x19, 1	; 25
  94:	fe cf       	rjmp	.-4      	; 0x92 <key_scan+0x26>
			return('X');
  96:	88 e5       	ldi	r24, 0x58	; 88
  98:	08 95       	ret
		}
		if((PINA&0x04)==0)
  9a:	ca 99       	sbic	0x19, 2	; 25
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <key_scan+0x3a>
		{
			while(!(PINA&0x04));
  9e:	ca 9b       	sbis	0x19, 2	; 25
  a0:	fe cf       	rjmp	.-4      	; 0x9e <key_scan+0x32>
			return('-');
  a2:	8d e2       	ldi	r24, 0x2D	; 45
  a4:	08 95       	ret
		}
		if((PINA&0x08)==0)
  a6:	cb 99       	sbic	0x19, 3	; 25
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <key_scan+0x46>
		{
			while(!(PINA&0x08));
  aa:	cb 9b       	sbis	0x19, 3	; 25
  ac:	fe cf       	rjmp	.-4      	; 0xaa <key_scan+0x3e>
			return('+');
  ae:	8b e2       	ldi	r24, 0x2B	; 43
  b0:	08 95       	ret
		}
		
		PORTD=0x0D;
  b2:	92 bb       	out	0x12, r25	; 18
  b4:	e1 ee       	ldi	r30, 0xE1	; 225
  b6:	f4 e0       	ldi	r31, 0x04	; 4
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <key_scan+0x4c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <key_scan+0x52>
  be:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
  c0:	c8 99       	sbic	0x19, 0	; 25
  c2:	04 c0       	rjmp	.+8      	; 0xcc <key_scan+0x60>
		{
			while(!(PINA&0x01));
  c4:	c8 9b       	sbis	0x19, 0	; 25
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <key_scan+0x58>
			return('9');
  c8:	89 e3       	ldi	r24, 0x39	; 57
  ca:	08 95       	ret
		}
		if((PINA&0x02)==0)
  cc:	c9 99       	sbic	0x19, 1	; 25
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <key_scan+0x6c>
		{
			while(!(PINA&0x02));
  d0:	c9 9b       	sbis	0x19, 1	; 25
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <key_scan+0x64>
			return('6');
  d4:	86 e3       	ldi	r24, 0x36	; 54
  d6:	08 95       	ret
		}
		if((PINA&0x04)==0)
  d8:	ca 99       	sbic	0x19, 2	; 25
  da:	04 c0       	rjmp	.+8      	; 0xe4 <key_scan+0x78>
		{
			while(!(PINA&0x04));
  dc:	ca 9b       	sbis	0x19, 2	; 25
  de:	fe cf       	rjmp	.-4      	; 0xdc <key_scan+0x70>
			return('3');
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	08 95       	ret
		}
		if((PINA&0x08)==0)
  e4:	cb 99       	sbic	0x19, 3	; 25
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <key_scan+0x84>
		{
			while(!(PINA&0x08));
  e8:	cb 9b       	sbis	0x19, 3	; 25
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <key_scan+0x7c>
			return('=');
  ec:	8d e3       	ldi	r24, 0x3D	; 61
  ee:	08 95       	ret
		}
		
		
		PORTD=0x0B;
  f0:	22 bb       	out	0x12, r18	; 18
  f2:	e1 ee       	ldi	r30, 0xE1	; 225
  f4:	f4 e0       	ldi	r31, 0x04	; 4
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <key_scan+0x8a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <key_scan+0x90>
  fc:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
  fe:	c8 99       	sbic	0x19, 0	; 25
 100:	04 c0       	rjmp	.+8      	; 0x10a <key_scan+0x9e>
		{
			while(!(PINA&0x01));
 102:	c8 9b       	sbis	0x19, 0	; 25
 104:	fe cf       	rjmp	.-4      	; 0x102 <key_scan+0x96>
			return('8');
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	08 95       	ret
		}
		if((PINA&0x02)==0)
 10a:	c9 99       	sbic	0x19, 1	; 25
 10c:	04 c0       	rjmp	.+8      	; 0x116 <key_scan+0xaa>
		{
			while(!(PINA&0x02));
 10e:	c9 9b       	sbis	0x19, 1	; 25
 110:	fe cf       	rjmp	.-4      	; 0x10e <key_scan+0xa2>
			return('5');
 112:	85 e3       	ldi	r24, 0x35	; 53
 114:	08 95       	ret
		}
		if((PINA&0x04)==0)
 116:	ca 99       	sbic	0x19, 2	; 25
 118:	04 c0       	rjmp	.+8      	; 0x122 <key_scan+0xb6>
		{
			while(!(PINA&0x04));
 11a:	ca 9b       	sbis	0x19, 2	; 25
 11c:	fe cf       	rjmp	.-4      	; 0x11a <key_scan+0xae>
			return('2');
 11e:	82 e3       	ldi	r24, 0x32	; 50
 120:	08 95       	ret
		}
		if((PINA&0x08)==0)
 122:	cb 99       	sbic	0x19, 3	; 25
 124:	04 c0       	rjmp	.+8      	; 0x12e <key_scan+0xc2>
		{
			while(!(PINA&0x08));
 126:	cb 9b       	sbis	0x19, 3	; 25
 128:	fe cf       	rjmp	.-4      	; 0x126 <key_scan+0xba>
			return('0');
 12a:	80 e3       	ldi	r24, 0x30	; 48
 12c:	08 95       	ret
		}
		
		
		PORTD=0x07;
 12e:	32 bb       	out	0x12, r19	; 18
 130:	e1 ee       	ldi	r30, 0xE1	; 225
 132:	f4 e0       	ldi	r31, 0x04	; 4
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <key_scan+0xc8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <key_scan+0xce>
 13a:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 13c:	c8 99       	sbic	0x19, 0	; 25
 13e:	04 c0       	rjmp	.+8      	; 0x148 <key_scan+0xdc>
		{
			while(!(PINA&0x01));
 140:	c8 9b       	sbis	0x19, 0	; 25
 142:	fe cf       	rjmp	.-4      	; 0x140 <key_scan+0xd4>
			return('7');
 144:	87 e3       	ldi	r24, 0x37	; 55
 146:	08 95       	ret
		}
		if((PINA&0x02)==0)
 148:	c9 99       	sbic	0x19, 1	; 25
 14a:	04 c0       	rjmp	.+8      	; 0x154 <key_scan+0xe8>
		{
			while(!(PINA&0x02));
 14c:	c9 9b       	sbis	0x19, 1	; 25
 14e:	fe cf       	rjmp	.-4      	; 0x14c <key_scan+0xe0>
			return('4');
 150:	84 e3       	ldi	r24, 0x34	; 52
 152:	08 95       	ret
		}
		if((PINA&0x04)==0)
 154:	ca 99       	sbic	0x19, 2	; 25
 156:	04 c0       	rjmp	.+8      	; 0x160 <key_scan+0xf4>
		{
			while(!(PINA&0x04));
 158:	ca 9b       	sbis	0x19, 2	; 25
 15a:	fe cf       	rjmp	.-4      	; 0x158 <key_scan+0xec>
			return('1');
 15c:	81 e3       	ldi	r24, 0x31	; 49
 15e:	08 95       	ret
		}
		if((PINA&0x08)==0)
 160:	cb 99       	sbic	0x19, 3	; 25
 162:	88 cf       	rjmp	.-240    	; 0x74 <key_scan+0x8>
		{
			while(!(PINA&0x08));
 164:	cb 9b       	sbis	0x19, 3	; 25
 166:	fe cf       	rjmp	.-4      	; 0x164 <key_scan+0xf8>
			return('C');
 168:	83 e4       	ldi	r24, 0x43	; 67
		}
	}
}
 16a:	08 95       	ret

0000016c <main>:

int main(void)
{
    DDRA=0x00;
 16c:	1a ba       	out	0x1a, r1	; 26
	DDRD=0xFF;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	81 bb       	out	0x11, r24	; 17
	DDRB=0xFF;
 172:	87 bb       	out	0x17, r24	; 23
	while(1)
    {
        a=key_scan();
		if(a=='1' && i%2==0)
		{
			PORTB=0x01;
 174:	c1 e0       	ldi	r28, 0x01	; 1
	DDRB=0xFF;
	char a;
	int i=0;
	while(1)
    {
        a=key_scan();
 176:	0e 94 36 00 	call	0x6c	; 0x6c <key_scan>
		if(a=='1' && i%2==0)
 17a:	81 33       	cpi	r24, 0x31	; 49
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0xa>
		{
			PORTB=0x01;
 17e:	c8 bb       	out	0x18, r28	; 24
			i++;
		}
		if(a=='1' && i%2!=0)
		{
			PORTB=0x00;
 180:	18 ba       	out	0x18, r1	; 24
 182:	f9 cf       	rjmp	.-14     	; 0x176 <main+0xa>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
