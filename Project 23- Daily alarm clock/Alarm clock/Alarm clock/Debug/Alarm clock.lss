
Alarm clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000045c  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080006c  0080006c  000004fc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006d2  00000000  00000000  00000cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000243  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000294  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000013c  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000018e  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000419  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000058  00000000  00000000  00001f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0c 02 	call	0x418	; 0x418 <main>
  8a:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_TIMER>:
int a=0, b=0,c=0,d=0;
int i=0,j=0,k=0,l=0;

void init_TIMER()
{
	OCR0=1000;
  92:	88 ee       	ldi	r24, 0xE8	; 232
  94:	8c bf       	out	0x3c, r24	; 60
	TCCR0=(1<<WGM12)|(1<<CS10);
  96:	89 e0       	ldi	r24, 0x09	; 9
  98:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<OCIE0);
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	89 bf       	out	0x39, r24	; 57
  9e:	08 95       	ret

000000a0 <LCD_cmd>:
	cmd1=((abc<<4)&(0xf0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  a0:	85 bb       	out	0x15, r24	; 21
	LCD_port&=~(1<<RS);//RS=0 for command
  a2:	a8 98       	cbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);///rw=0
  a4:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);///
  a6:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f e3       	ldi	r24, 0x3F	; 63
  aa:	9c e9       	ldi	r25, 0x9C	; 156
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_cmd+0xc>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_cmd+0x12>
  b2:	00 00       	nop
	_delay_ms(10);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  b4:	aa 98       	cbi	0x15, 2	; 21
  b6:	08 95       	ret

000000b8 <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  b8:	cf 93       	push	r28
  ba:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xf0;
	LCD_cmd(cmd1);
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_cmd>
	cmd1=((abc<<4)&(0xf0));
  c4:	20 e1       	ldi	r18, 0x10	; 16
  c6:	c2 9f       	mul	r28, r18
  c8:	c0 01       	movw	r24, r0
  ca:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  cc:	99 27       	eor	r25, r25
  ce:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_cmd>
}
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <lcd_init>:
}

void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  de:	88 e2       	ldi	r24, 0x28	; 40
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
  f6:	08 95       	ret

000000f8 <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  f8:	85 bb       	out	0x15, r24	; 21
	LCD_port|=(1<<RS);
  fa:	a8 9a       	sbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);
  fc:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);
  fe:	aa 9a       	sbi	0x15, 2	; 21
 100:	8f e9       	ldi	r24, 0x9F	; 159
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_data+0xc>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_data+0x12>
 10a:	00 00       	nop
	_delay_ms(1);
	LCD_port&=~(1<<EN);
 10c:	aa 98       	cbi	0x15, 2	; 21
 10e:	08 95       	ret

00000110 <dis_data>:
}

void dis_data(unsigned char abc)
{
 110:	cf 93       	push	r28
 112:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
 11a:	8c 2f       	mov	r24, r28
 11c:	82 95       	swap	r24
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_data>
}
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <LCD_string>:
void LCD_string(unsigned char *str)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!='\0')
 12e:	88 81       	ld	r24, Y
 130:	88 23       	and	r24, r24
 132:	31 f0       	breq	.+12     	; 0x140 <LCD_string+0x18>
	data1=abc&0xf0;
	LCD_data(data1);
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}
void LCD_string(unsigned char *str)
 134:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!='\0')
	{	dis_data(str[i]);
 136:	0e 94 88 00 	call	0x110	; 0x110 <dis_data>
	LCD_data(data1);
}
void LCD_string(unsigned char *str)
{
	int i;
	while(str[i]!='\0')
 13a:	89 91       	ld	r24, Y+
 13c:	81 11       	cpse	r24, r1
 13e:	fb cf       	rjmp	.-10     	; 0x136 <LCD_string+0xe>
	{	dis_data(str[i]);
		i++;
	}

}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <LCD_number>:

LCD_number(unsigned int num)
{
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	64 97       	sbiw	r28, 0x14	; 20
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	ac 01       	movw	r20, r24
	int N[10],M[10],count=0,i=0,j,num1;
	while(num>0)
 164:	00 97       	sbiw	r24, 0x00	; 0
 166:	09 f4       	brne	.+2      	; 0x16a <LCD_number+0x24>
 168:	3d c0       	rjmp	.+122    	; 0x1e4 <LCD_number+0x9e>
 16a:	fe 01       	movw	r30, r28
 16c:	31 96       	adiw	r30, 0x01	; 1

}

LCD_number(unsigned int num)
{
	int N[10],M[10],count=0,i=0,j,num1;
 16e:	e1 2c       	mov	r14, r1
 170:	f1 2c       	mov	r15, r1
	while(num>0)
	{
		num1=num%10;
 172:	9a 01       	movw	r18, r20
 174:	ad ec       	ldi	r26, 0xCD	; 205
 176:	bc ec       	ldi	r27, 0xCC	; 204
 178:	0e 94 20 02 	call	0x440	; 0x440 <__umulhisi3>
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	bc 01       	movw	r22, r24
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	9c 01       	movw	r18, r24
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	26 0f       	add	r18, r22
 19e:	37 1f       	adc	r19, r23
 1a0:	42 1b       	sub	r20, r18
 1a2:	53 0b       	sbc	r21, r19
		N[i]=num1;
 1a4:	41 93       	st	Z+, r20
 1a6:	51 93       	st	Z+, r21
		i++;
		num=num/10;
 1a8:	ac 01       	movw	r20, r24
		count++;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	e8 1a       	sub	r14, r24
 1ae:	f8 0a       	sbc	r15, r24
}

LCD_number(unsigned int num)
{
	int N[10],M[10],count=0,i=0,j,num1;
	while(num>0)
 1b0:	41 15       	cp	r20, r1
 1b2:	51 05       	cpc	r21, r1
 1b4:	f1 f6       	brne	.-68     	; 0x172 <LCD_number+0x2c>
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
 1b6:	87 01       	movw	r16, r14
 1b8:	01 50       	subi	r16, 0x01	; 1
 1ba:	11 09       	sbc	r17, r1
 1bc:	9a f0       	brmi	.+38     	; 0x1e4 <LCD_number+0x9e>
		i++;
	}

}

LCD_number(unsigned int num)
 1be:	ee 0c       	add	r14, r14
 1c0:	ff 1c       	adc	r15, r15
 1c2:	e1 e0       	ldi	r30, 0x01	; 1
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ec 0f       	add	r30, r28
 1c8:	fd 1f       	adc	r31, r29
 1ca:	ee 0e       	add	r14, r30
 1cc:	ff 1e       	adc	r15, r31
 1ce:	f2 e0       	ldi	r31, 0x02	; 2
 1d0:	ef 1a       	sub	r14, r31
 1d2:	f1 08       	sbc	r15, r1
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
 1d4:	f7 01       	movw	r30, r14
 1d6:	80 81       	ld	r24, Z
 1d8:	80 5d       	subi	r24, 0xD0	; 208
 1da:	0e 94 88 00 	call	0x110	; 0x110 <dis_data>
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
 1de:	01 50       	subi	r16, 0x01	; 1
 1e0:	11 09       	sbc	r17, r1
 1e2:	a8 f7       	brcc	.-22     	; 0x1ce <LCD_number+0x88>
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
	}
}
 1e4:	64 96       	adiw	r28, 0x14	; 20
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	08 95       	ret

000001fe <__vector_1>:
	TCCR0=(1<<WGM12)|(1<<CS10);
	TIMSK=(1<<OCIE0);
}

ISR(INT0_vect)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	if(i<=9)
 220:	80 91 72 00 	lds	r24, 0x0072
 224:	90 91 73 00 	lds	r25, 0x0073
 228:	8a 30       	cpi	r24, 0x0A	; 10
 22a:	91 05       	cpc	r25, r1
 22c:	0c f0       	brlt	.+2      	; 0x230 <__vector_1+0x32>
 22e:	e3 c0       	rjmp	.+454    	; 0x3f6 <__vector_1+0x1f8>
	{
		a=i;
 230:	90 93 7b 00 	sts	0x007B, r25
 234:	80 93 7a 00 	sts	0x007A, r24
		i++;
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	90 93 73 00 	sts	0x0073, r25
 23e:	80 93 72 00 	sts	0x0072, r24
		
		dis_cmd(0x8A);
 242:	8a e8       	ldi	r24, 0x8A	; 138
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
		dis_data(a+0x30);
 24a:	80 91 7a 00 	lds	r24, 0x007A
 24e:	90 91 7b 00 	lds	r25, 0x007B
 252:	c0 96       	adiw	r24, 0x30	; 48
 254:	0e 94 88 00 	call	0x110	; 0x110 <dis_data>
		dis_cmd(0x89);
 258:	89 e8       	ldi	r24, 0x89	; 137
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
		dis_data(c+0x30);
 260:	80 91 76 00 	lds	r24, 0x0076
 264:	90 91 77 00 	lds	r25, 0x0077
 268:	c0 96       	adiw	r24, 0x30	; 48
 26a:	0e 94 88 00 	call	0x110	; 0x110 <dis_data>
		dis_cmd(0x88);
 26e:	88 e8       	ldi	r24, 0x88	; 136
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
		dis_data(':');
 276:	8a e3       	ldi	r24, 0x3A	; 58
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 88 00 	call	0x110	; 0x110 <dis_data>
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	83 ed       	ldi	r24, 0xD3	; 211
 282:	90 e3       	ldi	r25, 0x30	; 48
 284:	21 50       	subi	r18, 0x01	; 1
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <__vector_1+0x86>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <__vector_1+0x90>
 28e:	00 00       	nop
		_delay_ms(1000);
		if(i>9 && j<5)
 290:	80 91 72 00 	lds	r24, 0x0072
 294:	90 91 73 00 	lds	r25, 0x0073
 298:	0a 97       	sbiw	r24, 0x0a	; 10
 29a:	5c f1       	brlt	.+86     	; 0x2f2 <__vector_1+0xf4>
 29c:	80 91 70 00 	lds	r24, 0x0070
 2a0:	90 91 71 00 	lds	r25, 0x0071
 2a4:	85 30       	cpi	r24, 0x05	; 5
 2a6:	91 05       	cpc	r25, r1
 2a8:	0c f0       	brlt	.+2      	; 0x2ac <__vector_1+0xae>
 2aa:	a1 c0       	rjmp	.+322    	; 0x3ee <__vector_1+0x1f0>
		{
			j++;
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	90 93 71 00 	sts	0x0071, r25
 2b2:	80 93 70 00 	sts	0x0070, r24
			c=j;
 2b6:	90 93 77 00 	sts	0x0077, r25
 2ba:	80 93 76 00 	sts	0x0076, r24
			i=0;
 2be:	10 92 73 00 	sts	0x0073, r1
 2c2:	10 92 72 00 	sts	0x0072, r1
 2c6:	15 c0       	rjmp	.+42     	; 0x2f2 <__vector_1+0xf4>
		}
		if(i>9 && j==5)
		{
			j=0;
 2c8:	10 92 71 00 	sts	0x0071, r1
 2cc:	10 92 70 00 	sts	0x0070, r1
			c=j;
 2d0:	10 92 77 00 	sts	0x0077, r1
 2d4:	10 92 76 00 	sts	0x0076, r1
			i=0;
 2d8:	10 92 73 00 	sts	0x0073, r1
 2dc:	10 92 72 00 	sts	0x0072, r1
			k++;
 2e0:	80 91 6e 00 	lds	r24, 0x006E
 2e4:	90 91 6f 00 	lds	r25, 0x006F
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	90 93 6f 00 	sts	0x006F, r25
 2ee:	80 93 6e 00 	sts	0x006E, r24
		}
		
		b=k;
 2f2:	80 91 6e 00 	lds	r24, 0x006E
 2f6:	90 91 6f 00 	lds	r25, 0x006F
 2fa:	90 93 79 00 	sts	0x0079, r25
 2fe:	80 93 78 00 	sts	0x0078, r24
		if(b<10)
 302:	8a 30       	cpi	r24, 0x0A	; 10
 304:	91 05       	cpc	r25, r1
 306:	64 f4       	brge	.+24     	; 0x320 <__vector_1+0x122>
		{	dis_cmd(0x87);
 308:	87 e8       	ldi	r24, 0x87	; 135
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
			dis_data(b+0x30);
 310:	80 91 78 00 	lds	r24, 0x0078
 314:	90 91 79 00 	lds	r25, 0x0079
 318:	c0 96       	adiw	r24, 0x30	; 48
 31a:	0e 94 88 00 	call	0x110	; 0x110 <dis_data>
 31e:	1a c0       	rjmp	.+52     	; 0x354 <__vector_1+0x156>
		}
		else if(b<60)
 320:	cc 97       	sbiw	r24, 0x3c	; 60
 322:	5c f4       	brge	.+22     	; 0x33a <__vector_1+0x13c>
		{	dis_cmd(0x86);
 324:	86 e8       	ldi	r24, 0x86	; 134
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
			LCD_number(b);
 32c:	80 91 78 00 	lds	r24, 0x0078
 330:	90 91 79 00 	lds	r25, 0x0079
 334:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_number>
 338:	0d c0       	rjmp	.+26     	; 0x354 <__vector_1+0x156>
		}
		else
		{
			b=0;
 33a:	10 92 79 00 	sts	0x0079, r1
 33e:	10 92 78 00 	sts	0x0078, r1
			l++;
 342:	80 91 6c 00 	lds	r24, 0x006C
 346:	90 91 6d 00 	lds	r25, 0x006D
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	90 93 6d 00 	sts	0x006D, r25
 350:	80 93 6c 00 	sts	0x006C, r24
		}
		d=l;
 354:	80 91 6c 00 	lds	r24, 0x006C
 358:	90 91 6d 00 	lds	r25, 0x006D
 35c:	90 93 75 00 	sts	0x0075, r25
 360:	80 93 74 00 	sts	0x0074, r24
		if(d==D)
 364:	20 91 60 00 	lds	r18, 0x0060
 368:	30 91 61 00 	lds	r19, 0x0061
 36c:	82 17       	cp	r24, r18
 36e:	93 07       	cpc	r25, r19
 370:	69 f4       	brne	.+26     	; 0x38c <__vector_1+0x18e>
		{
			if(b==B)
 372:	20 91 78 00 	lds	r18, 0x0078
 376:	30 91 79 00 	lds	r19, 0x0079
 37a:	80 91 7c 00 	lds	r24, 0x007C
 37e:	90 91 7d 00 	lds	r25, 0x007D
 382:	28 17       	cp	r18, r24
 384:	39 07       	cpc	r19, r25
 386:	11 f4       	brne	.+4      	; 0x38c <__vector_1+0x18e>
			PORTA=0xFF;
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	8b bb       	out	0x1b, r24	; 27
		}
		if(d<10)
 38c:	80 91 74 00 	lds	r24, 0x0074
 390:	90 91 75 00 	lds	r25, 0x0075
 394:	8a 30       	cpi	r24, 0x0A	; 10
 396:	91 05       	cpc	r25, r1
 398:	64 f4       	brge	.+24     	; 0x3b2 <__vector_1+0x1b4>
		{	dis_cmd(0x84);
 39a:	84 e8       	ldi	r24, 0x84	; 132
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
			dis_data(d+0x30);
 3a2:	80 91 74 00 	lds	r24, 0x0074
 3a6:	90 91 75 00 	lds	r25, 0x0075
 3aa:	c0 96       	adiw	r24, 0x30	; 48
 3ac:	0e 94 88 00 	call	0x110	; 0x110 <dis_data>
 3b0:	22 c0       	rjmp	.+68     	; 0x3f6 <__vector_1+0x1f8>
		}
		else if(d<=24)
 3b2:	49 97       	sbiw	r24, 0x19	; 25
 3b4:	5c f4       	brge	.+22     	; 0x3cc <__vector_1+0x1ce>
		{	dis_cmd(0x83);
 3b6:	83 e8       	ldi	r24, 0x83	; 131
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
			LCD_number(d);
 3be:	80 91 74 00 	lds	r24, 0x0074
 3c2:	90 91 75 00 	lds	r25, 0x0075
 3c6:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_number>
 3ca:	15 c0       	rjmp	.+42     	; 0x3f6 <__vector_1+0x1f8>
		}
		else if(d>24)
		{
			i=0;j=0;k=0;l=0;
 3cc:	10 92 73 00 	sts	0x0073, r1
 3d0:	10 92 72 00 	sts	0x0072, r1
 3d4:	10 92 71 00 	sts	0x0071, r1
 3d8:	10 92 70 00 	sts	0x0070, r1
 3dc:	10 92 6f 00 	sts	0x006F, r1
 3e0:	10 92 6e 00 	sts	0x006E, r1
 3e4:	10 92 6d 00 	sts	0x006D, r1
 3e8:	10 92 6c 00 	sts	0x006C, r1
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <__vector_1+0x1f8>
		{
			j++;
			c=j;
			i=0;
		}
		if(i>9 && j==5)
 3ee:	05 97       	sbiw	r24, 0x05	; 5
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <__vector_1+0x1f6>
 3f2:	7f cf       	rjmp	.-258    	; 0x2f2 <__vector_1+0xf4>
 3f4:	69 cf       	rjmp	.-302    	; 0x2c8 <__vector_1+0xca>
		else if(d>24)
		{
			i=0;j=0;k=0;l=0;
		}
	}
}
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <main>:
	}
}

int main(void)
{
	DDRA=0xFF;
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFF;
 41c:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 41e:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_init>
	dis_cmd(0x83);
 422:	83 e8       	ldi	r24, 0x83	; 131
 424:	0e 94 5c 00 	call	0xb8	; 0xb8 <dis_cmd>
	LCD_string("00:00:00");
 428:	82 e6       	ldi	r24, 0x62	; 98
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 94 00 	call	0x128	; 0x128 <LCD_string>
	init_TIMER();
 430:	0e 94 49 00 	call	0x92	; 0x92 <init_TIMER>
	sei();
 434:	78 94       	sei
	MCUCR=0x00;
 436:	15 be       	out	0x35, r1	; 53
	MCUCSR=0x00;
 438:	14 be       	out	0x34, r1	; 52
	GICR=0b01000000;
 43a:	80 e4       	ldi	r24, 0x40	; 64
 43c:	8b bf       	out	0x3b, r24	; 59
 43e:	ff cf       	rjmp	.-2      	; 0x43e <main+0x26>

00000440 <__umulhisi3>:
 440:	a2 9f       	mul	r26, r18
 442:	b0 01       	movw	r22, r0
 444:	b3 9f       	mul	r27, r19
 446:	c0 01       	movw	r24, r0
 448:	a3 9f       	mul	r26, r19
 44a:	01 d0       	rcall	.+2      	; 0x44e <__umulhisi3+0xe>
 44c:	b2 9f       	mul	r27, r18
 44e:	70 0d       	add	r23, r0
 450:	81 1d       	adc	r24, r1
 452:	11 24       	eor	r1, r1
 454:	91 1d       	adc	r25, r1
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
