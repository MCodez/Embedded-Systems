
IR 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000061a  0000068e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000df7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e09  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000228  00000000  00000000  00001c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cf  00000000  00000000  00001ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000157  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036b  00000000  00000000  000023db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002746  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 02 01 	call	0x204	; 0x204 <main>
  7a:	0c 94 0b 03 	jmp	0x616	; 0x616 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
	cmd1=((abc<<4)&(0xf0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  82:	85 bb       	out	0x15, r24	; 21
	LCD_port&=~(1<<RS);//RS=0 for command
  84:	a8 98       	cbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);///rw=0
  86:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);///
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e3       	ldi	r24, 0x3F	; 63
  8c:	9c e9       	ldi	r25, 0x9C	; 156
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmd+0x12>
  94:	00 00       	nop
	_delay_ms(10);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  96:	aa 98       	cbi	0x15, 2	; 21
  98:	08 95       	ret

0000009a <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xf0;
	LCD_cmd(cmd1);
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	cmd1=((abc<<4)&(0xf0));
  a6:	20 e1       	ldi	r18, 0x10	; 16
  a8:	c2 9f       	mul	r28, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  ae:	99 27       	eor	r25, r25
  b0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  c0:	88 e2       	ldi	r24, 0x28	; 40
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
  d8:	08 95       	ret

000000da <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  da:	85 bb       	out	0x15, r24	; 21
	LCD_port|=(1<<RS);
  dc:	a8 9a       	sbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);
  de:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);
  e0:	aa 9a       	sbi	0x15, 2	; 21
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9c e9       	ldi	r25, 0x9C	; 156
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_data+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_data+0x12>
  ec:	00 00       	nop
	_delay_ms(10);
	LCD_port&=~(1<<EN);
  ee:	aa 98       	cbi	0x15, 2	; 21
  f0:	08 95       	ret

000000f2 <dis_data>:
}

void dis_data(unsigned char abc)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
  fc:	8c 2f       	mov	r24, r28
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_number>:
LCD_number(unsigned int num)
{
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	64 97       	sbiw	r28, 0x14	; 20
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	ac 01       	movw	r20, r24
	int N[10],M[10],count=0,i=0,j,num1;
	while(num>0)
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	09 f4       	brne	.+2      	; 0x12e <LCD_number+0x24>
 12c:	3d c0       	rjmp	.+122    	; 0x1a8 <LCD_number+0x9e>
 12e:	fe 01       	movw	r30, r28
 130:	31 96       	adiw	r30, 0x01	; 1
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}
LCD_number(unsigned int num)
{
	int N[10],M[10],count=0,i=0,j,num1;
 132:	e1 2c       	mov	r14, r1
 134:	f1 2c       	mov	r15, r1
	while(num>0)
	{
		num1=num%10;
 136:	9a 01       	movw	r18, r20
 138:	ad ec       	ldi	r26, 0xCD	; 205
 13a:	bc ec       	ldi	r27, 0xCC	; 204
 13c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__umulhisi3>
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	bc 01       	movw	r22, r24
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	9c 01       	movw	r18, r24
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	26 0f       	add	r18, r22
 162:	37 1f       	adc	r19, r23
 164:	42 1b       	sub	r20, r18
 166:	53 0b       	sbc	r21, r19
		N[i]=num1;
 168:	41 93       	st	Z+, r20
 16a:	51 93       	st	Z+, r21
		i++;
		num=num/10;
 16c:	ac 01       	movw	r20, r24
		count++;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	e8 1a       	sub	r14, r24
 172:	f8 0a       	sbc	r15, r24
	LCD_data(data1);
}
LCD_number(unsigned int num)
{
	int N[10],M[10],count=0,i=0,j,num1;
	while(num>0)
 174:	41 15       	cp	r20, r1
 176:	51 05       	cpc	r21, r1
 178:	f1 f6       	brne	.-68     	; 0x136 <LCD_number+0x2c>
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
 17a:	87 01       	movw	r16, r14
 17c:	01 50       	subi	r16, 0x01	; 1
 17e:	11 09       	sbc	r17, r1
 180:	9a f0       	brmi	.+38     	; 0x1a8 <LCD_number+0x9e>
	data1=abc&0xf0;
	LCD_data(data1);
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}
LCD_number(unsigned int num)
 182:	ee 0c       	add	r14, r14
 184:	ff 1c       	adc	r15, r15
 186:	e1 e0       	ldi	r30, 0x01	; 1
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ec 0f       	add	r30, r28
 18c:	fd 1f       	adc	r31, r29
 18e:	ee 0e       	add	r14, r30
 190:	ff 1e       	adc	r15, r31
 192:	f2 e0       	ldi	r31, 0x02	; 2
 194:	ef 1a       	sub	r14, r31
 196:	f1 08       	sbc	r15, r1
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
 198:	f7 01       	movw	r30, r14
 19a:	80 81       	ld	r24, Z
 19c:	80 5d       	subi	r24, 0xD0	; 208
 19e:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
 1a2:	01 50       	subi	r16, 0x01	; 1
 1a4:	11 09       	sbc	r17, r1
 1a6:	a8 f7       	brcc	.-22     	; 0x192 <LCD_number+0x88>
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
	}
}
 1a8:	64 96       	adiw	r28, 0x14	; 20
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	08 95       	ret

000001c2 <LCD_string>:

void LCD_string(unsigned char *str)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!='\0')
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	31 f0       	breq	.+12     	; 0x1da <LCD_string+0x18>
		M[j]=N[i];
		dis_data(M[j]+0x30);
	}
}

void LCD_string(unsigned char *str)
 1ce:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!='\0')
	{	dis_data(str[i]);
 1d0:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
}

void LCD_string(unsigned char *str)
{
	int i;
	while(str[i]!='\0')
 1d4:	89 91       	ld	r24, Y+
 1d6:	81 11       	cpse	r24, r1
 1d8:	fb cf       	rjmp	.-10     	; 0x1d0 <LCD_string+0xe>
	{	dis_data(str[i]);
		i++;
	}

}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <ADC_init>:

void ADC_init(void)
{
	ADMUX=(1<<REFS0);
 1e0:	80 e4       	ldi	r24, 0x40	; 64
 1e2:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1e4:	87 e8       	ldi	r24, 0x87	; 135
 1e6:	86 b9       	out	0x06, r24	; 6
 1e8:	08 95       	ret

000001ea <ADC_read>:
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
	ADMUX|=ch;
 1ea:	97 b1       	in	r25, 0x07	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
 1ec:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
 1ee:	98 2b       	or	r25, r24
 1f0:	97 b9       	out	0x07, r25	; 7
	ADCSRA|=(1<<ADSC);
 1f2:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)));
 1f4:	34 9b       	sbis	0x06, 4	; 6
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <ADC_read+0xa>
	ADCSRA|=(1<<ADIF);
 1f8:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
 1fa:	24 b1       	in	r18, 0x04	; 4
 1fc:	35 b1       	in	r19, 0x05	; 5
}
 1fe:	82 2f       	mov	r24, r18
 200:	93 2f       	mov	r25, r19
 202:	08 95       	ret

00000204 <main>:


int main(void)
{
	DDRA=0x00;
 204:	1a ba       	out	0x1a, r1	; 26
	DDRC=0xFF;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 20a:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
	ADC_init();
 20e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ADC_init>
	unsigned int a;
	dis_cmd(0x82);
 212:	82 e8       	ldi	r24, 0x82	; 130
 214:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");
 218:	80 e6       	ldi	r24, 0x60	; 96
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
	while(1)
	{
		a=ADC_read('0');
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ADC_read>
 226:	ec 01       	movw	r28, r24
		if(a>=60 && a<65)
 228:	cc 97       	sbiw	r24, 0x3c	; 60
 22a:	05 97       	sbiw	r24, 0x05	; 5
 22c:	90 f4       	brcc	.+36     	; 0x252 <main+0x4e>
		{dis_cmd(0x1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		dis_cmd(0x80);
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(20);
 23a:	84 e1       	ldi	r24, 0x14	; 20
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 242:	82 e8       	ldi	r24, 0x82	; 130
 244:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_string("cm");}
 248:	80 e6       	ldi	r24, 0x60	; 96
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 250:	5b c0       	rjmp	.+182    	; 0x308 <main+0x104>
		else if(a>=65 && a<70)
 252:	ce 01       	movw	r24, r28
 254:	81 54       	subi	r24, 0x41	; 65
 256:	91 09       	sbc	r25, r1
 258:	05 97       	sbiw	r24, 0x05	; 5
 25a:	90 f4       	brcc	.+36     	; 0x280 <main+0x7c>
		{
			dis_cmd(0x1);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	     LCD_number(19);
 268:	83 e1       	ldi	r24, 0x13	; 19
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		 dis_cmd(0x82);
 270:	82 e8       	ldi	r24, 0x82	; 130
 272:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	 LCD_string("cm");}
 276:	80 e6       	ldi	r24, 0x60	; 96
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 27e:	44 c0       	rjmp	.+136    	; 0x308 <main+0x104>
	    else if(a>=70 && a<75)
 280:	ce 01       	movw	r24, r28
 282:	86 54       	subi	r24, 0x46	; 70
 284:	91 09       	sbc	r25, r1
 286:	05 97       	sbiw	r24, 0x05	; 5
 288:	90 f4       	brcc	.+36     	; 0x2ae <main+0xaa>
	    {dis_cmd(0x1);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 290:	80 e8       	ldi	r24, 0x80	; 128
 292:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	    LCD_number(18);
 296:	82 e1       	ldi	r24, 0x12	; 18
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 29e:	82 e8       	ldi	r24, 0x82	; 130
 2a0:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 2a4:	80 e6       	ldi	r24, 0x60	; 96
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 2ac:	2d c0       	rjmp	.+90     	; 0x308 <main+0x104>
	    else if(a>=75 && a<80)
 2ae:	ce 01       	movw	r24, r28
 2b0:	8b 54       	subi	r24, 0x4B	; 75
 2b2:	91 09       	sbc	r25, r1
 2b4:	05 97       	sbiw	r24, 0x05	; 5
 2b6:	90 f4       	brcc	.+36     	; 0x2dc <main+0xd8>
	    {dis_cmd(0x1);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 2be:	80 e8       	ldi	r24, 0x80	; 128
 2c0:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	    LCD_number(17);
 2c4:	81 e1       	ldi	r24, 0x11	; 17
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 2cc:	82 e8       	ldi	r24, 0x82	; 130
 2ce:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 2d2:	80 e6       	ldi	r24, 0x60	; 96
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 2da:	16 c0       	rjmp	.+44     	; 0x308 <main+0x104>
	    else if(a>=80 && a<85)
 2dc:	ce 01       	movw	r24, r28
 2de:	80 55       	subi	r24, 0x50	; 80
 2e0:	91 09       	sbc	r25, r1
 2e2:	05 97       	sbiw	r24, 0x05	; 5
 2e4:	88 f4       	brcc	.+34     	; 0x308 <main+0x104>
	    {dis_cmd(0x1);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
        LCD_number(16);
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 2fa:	82 e8       	ldi	r24, 0x82	; 130
 2fc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 300:	80 e6       	ldi	r24, 0x60	; 96
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
        if(a>=85 && a<92)
 308:	ce 01       	movw	r24, r28
 30a:	85 55       	subi	r24, 0x55	; 85
 30c:	91 09       	sbc	r25, r1
 30e:	07 97       	sbiw	r24, 0x07	; 7
 310:	90 f4       	brcc	.+36     	; 0x336 <main+0x132>
        {dis_cmd(0x1);
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(15);dis_cmd(0x82);
 31e:	8f e0       	ldi	r24, 0x0F	; 15
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
 326:	82 e8       	ldi	r24, 0x82	; 130
 328:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 32c:	80 e6       	ldi	r24, 0x60	; 96
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 334:	5a c1       	rjmp	.+692    	; 0x5ea <__stack+0x18b>
		else if(a>=92 && a<96)
 336:	ce 01       	movw	r24, r28
 338:	8c 55       	subi	r24, 0x5C	; 92
 33a:	91 09       	sbc	r25, r1
 33c:	04 97       	sbiw	r24, 0x04	; 4
 33e:	90 f4       	brcc	.+36     	; 0x364 <main+0x160>
		{dis_cmd(0x1);
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(14);
 34c:	8e e0       	ldi	r24, 0x0E	; 14
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 354:	82 e8       	ldi	r24, 0x82	; 130
 356:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 35a:	80 e6       	ldi	r24, 0x60	; 96
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 362:	43 c1       	rjmp	.+646    	; 0x5ea <__stack+0x18b>
		else if(a>=96 && a<99)
 364:	ce 01       	movw	r24, r28
 366:	80 56       	subi	r24, 0x60	; 96
 368:	91 09       	sbc	r25, r1
 36a:	03 97       	sbiw	r24, 0x03	; 3
 36c:	90 f4       	brcc	.+36     	; 0x392 <main+0x18e>
		{dis_cmd(0x1);
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 374:	80 e8       	ldi	r24, 0x80	; 128
 376:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(13);
 37a:	8d e0       	ldi	r24, 0x0D	; 13
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 382:	82 e8       	ldi	r24, 0x82	; 130
 384:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 388:	80 e6       	ldi	r24, 0x60	; 96
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 390:	2c c1       	rjmp	.+600    	; 0x5ea <__stack+0x18b>
		else if(a>=99 && a<113)
 392:	ce 01       	movw	r24, r28
 394:	83 56       	subi	r24, 0x63	; 99
 396:	91 09       	sbc	r25, r1
 398:	0e 97       	sbiw	r24, 0x0e	; 14
 39a:	90 f4       	brcc	.+36     	; 0x3c0 <main+0x1bc>
		{dis_cmd(0x1);
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(12);
 3a8:	8c e0       	ldi	r24, 0x0C	; 12
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 3b0:	82 e8       	ldi	r24, 0x82	; 130
 3b2:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 3b6:	80 e6       	ldi	r24, 0x60	; 96
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 3be:	15 c1       	rjmp	.+554    	; 0x5ea <__stack+0x18b>
		else if(a>=113 && a<120)
 3c0:	ce 01       	movw	r24, r28
 3c2:	81 57       	subi	r24, 0x71	; 113
 3c4:	91 09       	sbc	r25, r1
 3c6:	07 97       	sbiw	r24, 0x07	; 7
 3c8:	90 f4       	brcc	.+36     	; 0x3ee <main+0x1ea>
		{dis_cmd(0x1);
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 3d0:	80 e8       	ldi	r24, 0x80	; 128
 3d2:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(11);
 3d6:	8b e0       	ldi	r24, 0x0B	; 11
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 3de:	82 e8       	ldi	r24, 0x82	; 130
 3e0:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 3e4:	80 e6       	ldi	r24, 0x60	; 96
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 3ec:	fe c0       	rjmp	.+508    	; 0x5ea <__stack+0x18b>
		else if(a>=120 && a<152)
 3ee:	ce 01       	movw	r24, r28
 3f0:	88 57       	subi	r24, 0x78	; 120
 3f2:	91 09       	sbc	r25, r1
 3f4:	80 97       	sbiw	r24, 0x20	; 32
 3f6:	90 f4       	brcc	.+36     	; 0x41c <main+0x218>
		{dis_cmd(0x1);
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 3fe:	80 e8       	ldi	r24, 0x80	; 128
 400:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(10);
 404:	8a e0       	ldi	r24, 0x0A	; 10
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 40c:	82 e8       	ldi	r24, 0x82	; 130
 40e:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 412:	80 e6       	ldi	r24, 0x60	; 96
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 41a:	e7 c0       	rjmp	.+462    	; 0x5ea <__stack+0x18b>
		else if(a>=152 && a<184)
 41c:	ce 01       	movw	r24, r28
 41e:	88 59       	subi	r24, 0x98	; 152
 420:	91 09       	sbc	r25, r1
 422:	80 97       	sbiw	r24, 0x20	; 32
 424:	90 f4       	brcc	.+36     	; 0x44a <main+0x246>
		{dis_cmd(0x1);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 42c:	80 e8       	ldi	r24, 0x80	; 128
 42e:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(9);
 432:	89 e0       	ldi	r24, 0x09	; 9
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 43a:	82 e8       	ldi	r24, 0x82	; 130
 43c:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 440:	80 e6       	ldi	r24, 0x60	; 96
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 448:	d0 c0       	rjmp	.+416    	; 0x5ea <__stack+0x18b>
		else if(a>=184 && a<216)
 44a:	ce 01       	movw	r24, r28
 44c:	88 5b       	subi	r24, 0xB8	; 184
 44e:	91 09       	sbc	r25, r1
 450:	80 97       	sbiw	r24, 0x20	; 32
 452:	90 f4       	brcc	.+36     	; 0x478 <__stack+0x19>
		{dis_cmd(0x1);
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(8);
 460:	88 e0       	ldi	r24, 0x08	; 8
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 468:	82 e8       	ldi	r24, 0x82	; 130
 46a:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 46e:	80 e6       	ldi	r24, 0x60	; 96
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 476:	b9 c0       	rjmp	.+370    	; 0x5ea <__stack+0x18b>
		else if(a>=216 && a<248)
 478:	ce 01       	movw	r24, r28
 47a:	88 5d       	subi	r24, 0xD8	; 216
 47c:	91 09       	sbc	r25, r1
 47e:	80 97       	sbiw	r24, 0x20	; 32
 480:	90 f4       	brcc	.+36     	; 0x4a6 <__stack+0x47>
		{dis_cmd(0x1);
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 488:	80 e8       	ldi	r24, 0x80	; 128
 48a:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(7);
 48e:	87 e0       	ldi	r24, 0x07	; 7
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 496:	82 e8       	ldi	r24, 0x82	; 130
 498:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 49c:	80 e6       	ldi	r24, 0x60	; 96
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 4a4:	a2 c0       	rjmp	.+324    	; 0x5ea <__stack+0x18b>
		else if(a>=248 && a<280)
 4a6:	ce 01       	movw	r24, r28
 4a8:	88 5f       	subi	r24, 0xF8	; 248
 4aa:	91 09       	sbc	r25, r1
 4ac:	80 97       	sbiw	r24, 0x20	; 32
 4ae:	90 f4       	brcc	.+36     	; 0x4d4 <__stack+0x75>
		{dis_cmd(0x1);
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 4b6:	80 e8       	ldi	r24, 0x80	; 128
 4b8:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(6);
 4bc:	86 e0       	ldi	r24, 0x06	; 6
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 4c4:	82 e8       	ldi	r24, 0x82	; 130
 4c6:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 4ca:	80 e6       	ldi	r24, 0x60	; 96
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 4d2:	8b c0       	rjmp	.+278    	; 0x5ea <__stack+0x18b>
		else if(a>=280 && a<418)
 4d4:	ce 01       	movw	r24, r28
 4d6:	88 51       	subi	r24, 0x18	; 24
 4d8:	91 40       	sbci	r25, 0x01	; 1
 4da:	8a 38       	cpi	r24, 0x8A	; 138
 4dc:	91 05       	cpc	r25, r1
 4de:	90 f4       	brcc	.+36     	; 0x504 <__stack+0xa5>
		{dis_cmd(0x1);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 4e6:	80 e8       	ldi	r24, 0x80	; 128
 4e8:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(5);
 4ec:	85 e0       	ldi	r24, 0x05	; 5
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 4f4:	82 e8       	ldi	r24, 0x82	; 130
 4f6:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 4fa:	80 e6       	ldi	r24, 0x60	; 96
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 502:	73 c0       	rjmp	.+230    	; 0x5ea <__stack+0x18b>
		else if(a>=418 && a<556)
 504:	ce 01       	movw	r24, r28
 506:	82 5a       	subi	r24, 0xA2	; 162
 508:	91 40       	sbci	r25, 0x01	; 1
 50a:	8a 38       	cpi	r24, 0x8A	; 138
 50c:	91 05       	cpc	r25, r1
 50e:	90 f4       	brcc	.+36     	; 0x534 <__stack+0xd5>
		{
			dis_cmd(0x1);
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 516:	80 e8       	ldi	r24, 0x80	; 128
 518:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(4);
 51c:	84 e0       	ldi	r24, 0x04	; 4
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 524:	82 e8       	ldi	r24, 0x82	; 130
 526:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 52a:	80 e6       	ldi	r24, 0x60	; 96
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 532:	5b c0       	rjmp	.+182    	; 0x5ea <__stack+0x18b>
		else if(a>=556 && a<694)
 534:	ce 01       	movw	r24, r28
 536:	8c 52       	subi	r24, 0x2C	; 44
 538:	92 40       	sbci	r25, 0x02	; 2
 53a:	8a 38       	cpi	r24, 0x8A	; 138
 53c:	91 05       	cpc	r25, r1
 53e:	90 f4       	brcc	.+36     	; 0x564 <__stack+0x105>
		{dis_cmd(0x1);
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 546:	80 e8       	ldi	r24, 0x80	; 128
 548:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(3);dis_cmd(0x82);
 54c:	83 e0       	ldi	r24, 0x03	; 3
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
 554:	82 e8       	ldi	r24, 0x82	; 130
 556:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 55a:	80 e6       	ldi	r24, 0x60	; 96
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 562:	43 c0       	rjmp	.+134    	; 0x5ea <__stack+0x18b>
		else if(a>=694 && a<832)
 564:	ce 01       	movw	r24, r28
 566:	86 5b       	subi	r24, 0xB6	; 182
 568:	92 40       	sbci	r25, 0x02	; 2
 56a:	8a 38       	cpi	r24, 0x8A	; 138
 56c:	91 05       	cpc	r25, r1
 56e:	90 f4       	brcc	.+36     	; 0x594 <__stack+0x135>
		{dis_cmd(0x1);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 576:	80 e8       	ldi	r24, 0x80	; 128
 578:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(2);
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 584:	82 e8       	ldi	r24, 0x82	; 130
 586:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 58a:	80 e6       	ldi	r24, 0x60	; 96
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 592:	2b c0       	rjmp	.+86     	; 0x5ea <__stack+0x18b>
		else if(a>=832 && a<950)
 594:	ce 01       	movw	r24, r28
 596:	80 54       	subi	r24, 0x40	; 64
 598:	93 40       	sbci	r25, 0x03	; 3
 59a:	86 37       	cpi	r24, 0x76	; 118
 59c:	91 05       	cpc	r25, r1
 59e:	90 f4       	brcc	.+36     	; 0x5c4 <__stack+0x165>
		{dis_cmd(0x1);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		dis_cmd(0x80);
 5a6:	80 e8       	ldi	r24, 0x80	; 128
 5a8:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		LCD_number(1);
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
		dis_cmd(0x82);
 5b4:	82 e8       	ldi	r24, 0x82	; 130
 5b6:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 5ba:	80 e6       	ldi	r24, 0x60	; 96
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 5c2:	13 c0       	rjmp	.+38     	; 0x5ea <__stack+0x18b>
		else if(a>=950)
 5c4:	c6 3b       	cpi	r28, 0xB6	; 182
 5c6:	d3 40       	sbci	r29, 0x03	; 3
 5c8:	80 f0       	brcs	.+32     	; 0x5ea <__stack+0x18b>
		{dis_cmd(0x1);
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_cmd(0x80);
 5d0:	80 e8       	ldi	r24, 0x80	; 128
 5d2:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		dis_data('0');
 5d6:	80 e3       	ldi	r24, 0x30	; 48
 5d8:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
		dis_cmd(0x82);
 5dc:	82 e8       	ldi	r24, 0x82	; 130
 5de:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("cm");}
 5e2:	80 e6       	ldi	r24, 0x60	; 96
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	91 ee       	ldi	r25, 0xE1	; 225
 5ee:	24 e0       	ldi	r18, 0x04	; 4
 5f0:	81 50       	subi	r24, 0x01	; 1
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	20 40       	sbci	r18, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <__stack+0x191>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <__stack+0x19b>
 5fa:	00 00       	nop
 5fc:	11 ce       	rjmp	.-990    	; 0x220 <main+0x1c>

000005fe <__umulhisi3>:
 5fe:	a2 9f       	mul	r26, r18
 600:	b0 01       	movw	r22, r0
 602:	b3 9f       	mul	r27, r19
 604:	c0 01       	movw	r24, r0
 606:	a3 9f       	mul	r26, r19
 608:	01 d0       	rcall	.+2      	; 0x60c <__umulhisi3+0xe>
 60a:	b2 9f       	mul	r27, r18
 60c:	70 0d       	add	r23, r0
 60e:	81 1d       	adc	r24, r1
 610:	11 24       	eor	r1, r1
 612:	91 1d       	adc	r25, r1
 614:	08 95       	ret

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
