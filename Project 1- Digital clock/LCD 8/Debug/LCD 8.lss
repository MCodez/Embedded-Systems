
LCD 8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000002ba  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075d  00000000  00000000  00000b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000022f  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029e  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000168  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000452  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  7a:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
	cmd1=((abc<<4)&(0xf0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  82:	85 bb       	out	0x15, r24	; 21
	LCD_port&=~(1<<RS);//RS=0 for command
  84:	a8 98       	cbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);///rw=0
  86:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);///
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	83 ec       	ldi	r24, 0xC3	; 195
  8c:	99 e0       	ldi	r25, 0x09	; 9
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmd+0x12>
  94:	00 00       	nop
	_delay_ms(10);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  96:	aa 98       	cbi	0x15, 2	; 21
  98:	08 95       	ret

0000009a <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xf0;
	LCD_cmd(cmd1);
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	cmd1=((abc<<4)&(0xf0));
  a6:	20 e1       	ldi	r18, 0x10	; 16
  a8:	c2 9f       	mul	r28, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  ae:	99 27       	eor	r25, r25
  b0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  c0:	88 e2       	ldi	r24, 0x28	; 40
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
  d8:	08 95       	ret

000000da <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  da:	85 bb       	out	0x15, r24	; 21
	LCD_port|=(1<<RS);
  dc:	a8 9a       	sbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);
  de:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);
  e0:	aa 9a       	sbi	0x15, 2	; 21
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_data+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_data+0x12>
  ec:	00 00       	nop
	_delay_ms(1);
	LCD_port&=~(1<<EN);
  ee:	aa 98       	cbi	0x15, 2	; 21
  f0:	08 95       	ret

000000f2 <dis_data>:
}

void dis_data(unsigned char abc)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
  fc:	8c 2f       	mov	r24, r28
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_string>:
void LCD_string(unsigned char *str)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!='\0')
 110:	88 81       	ld	r24, Y
 112:	88 23       	and	r24, r24
 114:	31 f0       	breq	.+12     	; 0x122 <LCD_string+0x18>
	data1=abc&0xf0;
	LCD_data(data1);
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}
void LCD_string(unsigned char *str)
 116:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!='\0')
	{	dis_data(str[i]);
 118:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
	LCD_data(data1);
}
void LCD_string(unsigned char *str)
{
	int i;
	while(str[i]!='\0')
 11c:	89 91       	ld	r24, Y+
 11e:	81 11       	cpse	r24, r1
 120:	fb cf       	rjmp	.-10     	; 0x118 <LCD_string+0xe>
	{	dis_data(str[i]);
		i++;
	}

}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <LCD_number>:
	dis_data(0x00);
	
}

LCD_number(unsigned int num)
{
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	64 97       	sbiw	r28, 0x14	; 20
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	ac 01       	movw	r20, r24
	int N[10],M[10],count=0,i=0,j,num1;
	while(num>0)
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	09 f4       	brne	.+2      	; 0x14c <LCD_number+0x24>
 14a:	3d c0       	rjmp	.+122    	; 0x1c6 <LCD_number+0x9e>
 14c:	fe 01       	movw	r30, r28
 14e:	31 96       	adiw	r30, 0x01	; 1
	
}

LCD_number(unsigned int num)
{
	int N[10],M[10],count=0,i=0,j,num1;
 150:	e1 2c       	mov	r14, r1
 152:	f1 2c       	mov	r15, r1
	while(num>0)
	{
		num1=num%10;
 154:	9a 01       	movw	r18, r20
 156:	ad ec       	ldi	r26, 0xCD	; 205
 158:	bc ec       	ldi	r27, 0xCC	; 204
 15a:	0e 94 4f 01 	call	0x29e	; 0x29e <__umulhisi3>
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	bc 01       	movw	r22, r24
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	9c 01       	movw	r18, r24
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	26 0f       	add	r18, r22
 180:	37 1f       	adc	r19, r23
 182:	42 1b       	sub	r20, r18
 184:	53 0b       	sbc	r21, r19
		N[i]=num1;
 186:	41 93       	st	Z+, r20
 188:	51 93       	st	Z+, r21
		i++;
		num=num/10;
 18a:	ac 01       	movw	r20, r24
		count++;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	e8 1a       	sub	r14, r24
 190:	f8 0a       	sbc	r15, r24
}

LCD_number(unsigned int num)
{
	int N[10],M[10],count=0,i=0,j,num1;
	while(num>0)
 192:	41 15       	cp	r20, r1
 194:	51 05       	cpc	r21, r1
 196:	f1 f6       	brne	.-68     	; 0x154 <LCD_number+0x2c>
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
 198:	87 01       	movw	r16, r14
 19a:	01 50       	subi	r16, 0x01	; 1
 19c:	11 09       	sbc	r17, r1
 19e:	9a f0       	brmi	.+38     	; 0x1c6 <LCD_number+0x9e>
	dis_data(0x01);
	dis_data(0x00);
	
}

LCD_number(unsigned int num)
 1a0:	ee 0c       	add	r14, r14
 1a2:	ff 1c       	adc	r15, r15
 1a4:	e1 e0       	ldi	r30, 0x01	; 1
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	ec 0f       	add	r30, r28
 1aa:	fd 1f       	adc	r31, r29
 1ac:	ee 0e       	add	r14, r30
 1ae:	ff 1e       	adc	r15, r31
 1b0:	f2 e0       	ldi	r31, 0x02	; 2
 1b2:	ef 1a       	sub	r14, r31
 1b4:	f1 08       	sbc	r15, r1
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 81       	ld	r24, Z
 1ba:	80 5d       	subi	r24, 0xD0	; 208
 1bc:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
 1c0:	01 50       	subi	r16, 0x01	; 1
 1c2:	11 09       	sbc	r17, r1
 1c4:	a8 f7       	brcc	.-22     	; 0x1b0 <LCD_number+0x88>
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
	}
}
 1c6:	64 96       	adiw	r28, 0x14	; 20
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	cd bf       	out	0x3d, r28	; 61
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	08 95       	ret

000001e0 <main>:
	

int main(void)
{
	DDRC=0xFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	84 bb       	out	0x14, r24	; 20
	int a=0, b=0,c=0;
	int i,j,k;
	lcd_init();
 1e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
	dis_cmd(0x86);
 1e8:	86 e8       	ldi	r24, 0x86	; 134
 1ea:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("00:00");
 1ee:	80 e6       	ldi	r24, 0x60	; 96
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
		dis_data(M[j]+0x30);
	}
}
	

int main(void)
 1f6:	aa 24       	eor	r10, r10
 1f8:	a3 94       	inc	r10
 1fa:	b1 2c       	mov	r11, r1
	lcd_init();
	dis_cmd(0x86);
	LCD_string("00:00");
	while(1)
	{
		j=0;
 1fc:	e1 2c       	mov	r14, r1
 1fe:	f1 2c       	mov	r15, r1
 200:	03 c0       	rjmp	.+6      	; 0x208 <main+0x28>
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	a2 1a       	sub	r10, r18
 206:	b2 0a       	sbc	r11, r18
 208:	e7 01       	movw	r28, r14
 20a:	8e 2d       	mov	r24, r14
		 while(j<=5)
		  {
		   j++;
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	10 e3       	ldi	r17, 0x30	; 48
			   
			a=i;
			dis_cmd(0x8A);
			dis_data(a+0x30);
			dis_cmd(0x89);
			dis_data(c+0x30);
 210:	0f 2e       	mov	r0, r31
 212:	f0 e3       	ldi	r31, 0x30	; 48
 214:	cf 2e       	mov	r12, r31
 216:	f0 2d       	mov	r31, r0
 218:	c8 0e       	add	r12, r24
		   for(i=0;i<=9;i++)
		   {
						
			   
			a=i;
			dis_cmd(0x8A);
 21a:	8a e8       	ldi	r24, 0x8A	; 138
 21c:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_data(a+0x30);
 220:	81 2f       	mov	r24, r17
 222:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
			dis_cmd(0x89);
 226:	89 e8       	ldi	r24, 0x89	; 137
 228:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_data(c+0x30);
 22c:	8c 2d       	mov	r24, r12
 22e:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
			dis_cmd(0x88);
 232:	88 e8       	ldi	r24, 0x88	; 136
 234:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
			dis_data(':');
 238:	8a e3       	ldi	r24, 0x3A	; 58
 23a:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	98 e0       	ldi	r25, 0x08	; 8
 242:	2d e3       	ldi	r18, 0x3D	; 61
 244:	81 50       	subi	r24, 0x01	; 1
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	20 40       	sbci	r18, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x64>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x6e>
 24e:	00 00       	nop
 250:	1f 5f       	subi	r17, 0xFF	; 255
	{
		j=0;
		 while(j<=5)
		  {
		   j++;
		   for(i=0;i<=9;i++)
 252:	1a 33       	cpi	r17, 0x3A	; 58
 254:	11 f7       	brne	.-60     	; 0x21a <main+0x3a>
	while(1)
	{
		j=0;
		 while(j<=5)
		  {
		   j++;
 256:	8c 2f       	mov	r24, r28
			_delay_ms(20000);
			
						
			
		   }
		   if(j==6)
 258:	c6 30       	cpi	r28, 0x06	; 6
 25a:	d1 05       	cpc	r29, r1
 25c:	b9 f6       	brne	.-82     	; 0x20c <main+0x2c>
 25e:	8f e9       	ldi	r24, 0x9F	; 159
 260:	96 e8       	ldi	r25, 0x86	; 134
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	81 50       	subi	r24, 0x01	; 1
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	20 40       	sbci	r18, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x84>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x8e>
 26e:	00 00       	nop
 270:	c5 01       	movw	r24, r10
			c=j;
		 }
		 _delay_ms(500);
		 k++;
		 b=k;
		 if(b<10)
 272:	2a e0       	ldi	r18, 0x0A	; 10
 274:	a2 16       	cp	r10, r18
 276:	b1 04       	cpc	r11, r1
 278:	44 f4       	brge	.+16     	; 0x28a <main+0xaa>
		 {dis_cmd(0x87);
 27a:	87 e8       	ldi	r24, 0x87	; 135
 27c:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		 dis_data(b+0x30);}
 280:	8a 2d       	mov	r24, r10
 282:	80 5d       	subi	r24, 0xD0	; 208
 284:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
 288:	bc cf       	rjmp	.-136    	; 0x202 <main+0x22>
		 else if(b<60)
 28a:	cc 97       	sbiw	r24, 0x3c	; 60
 28c:	0c f0       	brlt	.+2      	; 0x290 <main+0xb0>
 28e:	b9 cf       	rjmp	.-142    	; 0x202 <main+0x22>
		 {dis_cmd(0x86);
 290:	86 e8       	ldi	r24, 0x86	; 134
 292:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
		 LCD_number(b);}
 296:	c5 01       	movw	r24, r10
 298:	0e 94 94 00 	call	0x128	; 0x128 <LCD_number>
 29c:	b2 cf       	rjmp	.-156    	; 0x202 <main+0x22>

0000029e <__umulhisi3>:
 29e:	a2 9f       	mul	r26, r18
 2a0:	b0 01       	movw	r22, r0
 2a2:	b3 9f       	mul	r27, r19
 2a4:	c0 01       	movw	r24, r0
 2a6:	a3 9f       	mul	r26, r19
 2a8:	01 d0       	rcall	.+2      	; 0x2ac <__umulhisi3+0xe>
 2aa:	b2 9f       	mul	r27, r18
 2ac:	70 0d       	add	r23, r0
 2ae:	81 1d       	adc	r24, r1
 2b0:	11 24       	eor	r1, r1
 2b2:	91 1d       	adc	r25, r1
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
