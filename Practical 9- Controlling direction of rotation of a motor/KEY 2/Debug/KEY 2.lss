
KEY 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000022a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a03  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004b2  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d1  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ba  00000000  00000000  0000110d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014c  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000201  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  64:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_cmd>:
	cmd1=((abc<<4)&(0xF0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  6c:	85 bb       	out	0x15, r24	; 21
	LCD_port&=~(1<<RS);//RS=0 for command
  6e:	a8 98       	cbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);///rw=0
  70:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);///
  72:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	89 ef       	ldi	r24, 0xF9	; 249
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <LCD_cmd+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <LCD_cmd+0x12>
  7e:	00 00       	nop
	_delay_ms(1);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  80:	aa 98       	cbi	0x15, 2	; 21
  82:	08 95       	ret

00000084 <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  84:	cf 93       	push	r28
  86:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xF0;
	LCD_cmd(cmd1);
  88:	80 7f       	andi	r24, 0xF0	; 240
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
	cmd1=((abc<<4)&(0xF0));
  90:	20 e1       	ldi	r18, 0x10	; 16
  92:	c2 9f       	mul	r28, r18
  94:	c0 01       	movw	r24, r0
  96:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  98:	99 27       	eor	r25, r25
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
}
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  aa:	88 e2       	ldi	r24, 0x28	; 40
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
  c2:	08 95       	ret

000000c4 <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  c4:	85 bb       	out	0x15, r24	; 21
	LCD_port|=(1<<RS);
  c6:	a8 9a       	sbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);
  c8:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);
  ca:	aa 9a       	sbi	0x15, 2	; 21
  cc:	89 ef       	ldi	r24, 0xF9	; 249
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_data+0xc>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_data+0x12>
  d6:	00 00       	nop
	_delay_ms(1);
	LCD_port&=~(1<<EN);
  d8:	aa 98       	cbi	0x15, 2	; 21
  da:	08 95       	ret

000000dc <dis_data>:
}

void dis_data(unsigned char abc)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xF0;
	LCD_data(data1);
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_data>
	data1=((abc<<4)&0xF0);
	LCD_data(data1);
  e6:	8c 2f       	mov	r24, r28
  e8:	82 95       	swap	r24
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_data>
}
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <key_scan>:

char key_scan()
{
	while(1)
	{
		PORTD=0x0E;
  f4:	8e e0       	ldi	r24, 0x0E	; 14
		{
			while(!(PINA&0x08));
			return('+');
		}
		
		PORTD=0x0D;
  f6:	9d e0       	ldi	r25, 0x0D	; 13
			while(!(PINA&0x08));
			return('=');
		}
		
		
		PORTD=0x0B;
  f8:	2b e0       	ldi	r18, 0x0B	; 11
			while(!(PINA&0x08));
			return('0');
		}
		
		
		PORTD=0x07;
  fa:	37 e0       	ldi	r19, 0x07	; 7

char key_scan()
{
	while(1)
	{
		PORTD=0x0E;
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	e1 ee       	ldi	r30, 0xE1	; 225
 100:	f4 e0       	ldi	r31, 0x04	; 4
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <key_scan+0xe>
 106:	00 c0       	rjmp	.+0      	; 0x108 <key_scan+0x14>
 108:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 10a:	c8 99       	sbic	0x19, 0	; 25
 10c:	04 c0       	rjmp	.+8      	; 0x116 <key_scan+0x22>
		{
			while(!(PINA&0x01));
 10e:	c8 9b       	sbis	0x19, 0	; 25
 110:	fe cf       	rjmp	.-4      	; 0x10e <key_scan+0x1a>
			return('/');
 112:	8f e2       	ldi	r24, 0x2F	; 47
 114:	08 95       	ret
		}
		if((PINA&0x02)==0)
 116:	c9 99       	sbic	0x19, 1	; 25
 118:	04 c0       	rjmp	.+8      	; 0x122 <key_scan+0x2e>
		{
			while(!(PINA&0x02));
 11a:	c9 9b       	sbis	0x19, 1	; 25
 11c:	fe cf       	rjmp	.-4      	; 0x11a <key_scan+0x26>
			return('X');
 11e:	88 e5       	ldi	r24, 0x58	; 88
 120:	08 95       	ret
		}
		if((PINA&0x04)==0)
 122:	ca 99       	sbic	0x19, 2	; 25
 124:	04 c0       	rjmp	.+8      	; 0x12e <key_scan+0x3a>
		{
			while(!(PINA&0x04));
 126:	ca 9b       	sbis	0x19, 2	; 25
 128:	fe cf       	rjmp	.-4      	; 0x126 <key_scan+0x32>
			return('-');
 12a:	8d e2       	ldi	r24, 0x2D	; 45
 12c:	08 95       	ret
		}
		if((PINA&0x08)==0)
 12e:	cb 99       	sbic	0x19, 3	; 25
 130:	04 c0       	rjmp	.+8      	; 0x13a <key_scan+0x46>
		{
			while(!(PINA&0x08));
 132:	cb 9b       	sbis	0x19, 3	; 25
 134:	fe cf       	rjmp	.-4      	; 0x132 <key_scan+0x3e>
			return('+');
 136:	8b e2       	ldi	r24, 0x2B	; 43
 138:	08 95       	ret
		}
		
		PORTD=0x0D;
 13a:	92 bb       	out	0x12, r25	; 18
 13c:	e1 ee       	ldi	r30, 0xE1	; 225
 13e:	f4 e0       	ldi	r31, 0x04	; 4
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <key_scan+0x4c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <key_scan+0x52>
 146:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 148:	c8 99       	sbic	0x19, 0	; 25
 14a:	04 c0       	rjmp	.+8      	; 0x154 <key_scan+0x60>
		{
			while(!(PINA&0x01));
 14c:	c8 9b       	sbis	0x19, 0	; 25
 14e:	fe cf       	rjmp	.-4      	; 0x14c <key_scan+0x58>
			return('9');
 150:	89 e3       	ldi	r24, 0x39	; 57
 152:	08 95       	ret
		}
		if((PINA&0x02)==0)
 154:	c9 99       	sbic	0x19, 1	; 25
 156:	04 c0       	rjmp	.+8      	; 0x160 <key_scan+0x6c>
		{
			while(!(PINA&0x02));
 158:	c9 9b       	sbis	0x19, 1	; 25
 15a:	fe cf       	rjmp	.-4      	; 0x158 <key_scan+0x64>
			return('6');
 15c:	86 e3       	ldi	r24, 0x36	; 54
 15e:	08 95       	ret
		}
		if((PINA&0x04)==0)
 160:	ca 99       	sbic	0x19, 2	; 25
 162:	04 c0       	rjmp	.+8      	; 0x16c <key_scan+0x78>
		{
			while(!(PINA&0x04));
 164:	ca 9b       	sbis	0x19, 2	; 25
 166:	fe cf       	rjmp	.-4      	; 0x164 <key_scan+0x70>
			return('3');
 168:	83 e3       	ldi	r24, 0x33	; 51
 16a:	08 95       	ret
		}
		if((PINA&0x08)==0)
 16c:	cb 99       	sbic	0x19, 3	; 25
 16e:	04 c0       	rjmp	.+8      	; 0x178 <key_scan+0x84>
		{
			while(!(PINA&0x08));
 170:	cb 9b       	sbis	0x19, 3	; 25
 172:	fe cf       	rjmp	.-4      	; 0x170 <key_scan+0x7c>
			return('=');
 174:	8d e3       	ldi	r24, 0x3D	; 61
 176:	08 95       	ret
		}
		
		
		PORTD=0x0B;
 178:	22 bb       	out	0x12, r18	; 18
 17a:	e1 ee       	ldi	r30, 0xE1	; 225
 17c:	f4 e0       	ldi	r31, 0x04	; 4
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <key_scan+0x8a>
 182:	00 c0       	rjmp	.+0      	; 0x184 <key_scan+0x90>
 184:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 186:	c8 99       	sbic	0x19, 0	; 25
 188:	04 c0       	rjmp	.+8      	; 0x192 <key_scan+0x9e>
		{
			while(!(PINA&0x01));
 18a:	c8 9b       	sbis	0x19, 0	; 25
 18c:	fe cf       	rjmp	.-4      	; 0x18a <key_scan+0x96>
			return('8');
 18e:	88 e3       	ldi	r24, 0x38	; 56
 190:	08 95       	ret
		}
		if((PINA&0x02)==0)
 192:	c9 99       	sbic	0x19, 1	; 25
 194:	04 c0       	rjmp	.+8      	; 0x19e <key_scan+0xaa>
		{
			while(!(PINA&0x02));
 196:	c9 9b       	sbis	0x19, 1	; 25
 198:	fe cf       	rjmp	.-4      	; 0x196 <key_scan+0xa2>
			return('5');
 19a:	85 e3       	ldi	r24, 0x35	; 53
 19c:	08 95       	ret
		}
		if((PINA&0x04)==0)
 19e:	ca 99       	sbic	0x19, 2	; 25
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <key_scan+0xb6>
		{
			while(!(PINA&0x04));
 1a2:	ca 9b       	sbis	0x19, 2	; 25
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <key_scan+0xae>
			return('2');
 1a6:	82 e3       	ldi	r24, 0x32	; 50
 1a8:	08 95       	ret
		}
		if((PINA&0x08)==0)
 1aa:	cb 99       	sbic	0x19, 3	; 25
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <key_scan+0xc2>
		{
			while(!(PINA&0x08));
 1ae:	cb 9b       	sbis	0x19, 3	; 25
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <key_scan+0xba>
			return('0');
 1b2:	80 e3       	ldi	r24, 0x30	; 48
 1b4:	08 95       	ret
		}
		
		
		PORTD=0x07;
 1b6:	32 bb       	out	0x12, r19	; 18
 1b8:	e1 ee       	ldi	r30, 0xE1	; 225
 1ba:	f4 e0       	ldi	r31, 0x04	; 4
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <key_scan+0xc8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <key_scan+0xce>
 1c2:	00 00       	nop
		_delay_ms(5);
		if((PINA&0x01)==0)
 1c4:	c8 99       	sbic	0x19, 0	; 25
 1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <key_scan+0xdc>
		{
			while(!(PINA&0x01));
 1c8:	c8 9b       	sbis	0x19, 0	; 25
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <key_scan+0xd4>
			return('7');
 1cc:	87 e3       	ldi	r24, 0x37	; 55
 1ce:	08 95       	ret
		}
		if((PINA&0x02)==0)
 1d0:	c9 99       	sbic	0x19, 1	; 25
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <key_scan+0xe8>
		{
			while(!(PINA&0x02));
 1d4:	c9 9b       	sbis	0x19, 1	; 25
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <key_scan+0xe0>
			return('4');
 1d8:	84 e3       	ldi	r24, 0x34	; 52
 1da:	08 95       	ret
		}
		if((PINA&0x04)==0)
 1dc:	ca 99       	sbic	0x19, 2	; 25
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <key_scan+0xf4>
		{
			while(!(PINA&0x04));
 1e0:	ca 9b       	sbis	0x19, 2	; 25
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <key_scan+0xec>
			return('1');
 1e4:	81 e3       	ldi	r24, 0x31	; 49
 1e6:	08 95       	ret
		}
		if((PINA&0x08)==0)
 1e8:	cb 99       	sbic	0x19, 3	; 25
 1ea:	88 cf       	rjmp	.-240    	; 0xfc <key_scan+0x8>
		{
			while(!(PINA&0x08));
 1ec:	cb 9b       	sbis	0x19, 3	; 25
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <key_scan+0xf8>
			return('C');
 1f0:	83 e4       	ldi	r24, 0x43	; 67
		}
	}
}
 1f2:	08 95       	ret

000001f4 <main>:


int main(void)
{
	unsigned char a;
	DDRC=0xFF;
 1f4:	cf ef       	ldi	r28, 0xFF	; 255
 1f6:	c4 bb       	out	0x14, r28	; 20
	DDRB=0xFF;
 1f8:	c7 bb       	out	0x17, r28	; 23
	DDRA=0x00;
 1fa:	1a ba       	out	0x1a, r1	; 26
	DDRD=0xFF;
 1fc:	c1 bb       	out	0x11, r28	; 17
	lcd_init();
 1fe:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_init>
	PORTA=0xFF;
 202:	cb bb       	out	0x1b, r28	; 27
	PORTD=0x00;
 204:	12 ba       	out	0x12, r1	; 18
	PORTB=0x00;
 206:	18 ba       	out	0x18, r1	; 24
	{
		a=key_scan();
		
		dis_data(a);
		if(a=='1')
		PORTB=0x09;
 208:	d9 e0       	ldi	r29, 0x09	; 9
		if(a=='0')
		PORTB=0x06;
 20a:	16 e0       	ldi	r17, 0x06	; 6
	PORTB=0x00;
	
	
	while(1)
	{
		a=key_scan();
 20c:	0e 94 7a 00 	call	0xf4	; 0xf4 <key_scan>
 210:	c8 2f       	mov	r28, r24
		
		dis_data(a);
 212:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
		if(a=='1')
 216:	c1 33       	cpi	r28, 0x31	; 49
 218:	11 f4       	brne	.+4      	; 0x21e <main+0x2a>
		PORTB=0x09;
 21a:	d8 bb       	out	0x18, r29	; 24
 21c:	f7 cf       	rjmp	.-18     	; 0x20c <main+0x18>
		if(a=='0')
 21e:	c0 33       	cpi	r28, 0x30	; 48
 220:	a9 f7       	brne	.-22     	; 0x20c <main+0x18>
		PORTB=0x06;
 222:	18 bb       	out	0x18, r17	; 24
 224:	f3 cf       	rjmp	.-26     	; 0x20c <main+0x18>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
