
analog_ir.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b4  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000088b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000008ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000ff  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c7  00000000  00000000  000009e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000103  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ea  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003d  00000000  00000000  00000ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:

#include <avr/io.h>

void ADC_init(void)
{
	ADMUX=(1<<REFS0);
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  70:	87 e8       	ldi	r24, 0x87	; 135
  72:	86 b9       	out	0x06, r24	; 6
  74:	08 95       	ret

00000076 <ADC_read>:
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
	ADMUX|=ch;
  76:	97 b1       	in	r25, 0x07	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
  78:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
  7a:	98 2b       	or	r25, r24
  7c:	97 b9       	out	0x07, r25	; 7
	ADCSRA|=(1<<ADSC);
  7e:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)));
  80:	34 9b       	sbis	0x06, 4	; 6
  82:	fe cf       	rjmp	.-4      	; 0x80 <ADC_read+0xa>
	ADCSRA|=(1<<ADIF);
  84:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
  86:	24 b1       	in	r18, 0x04	; 4
  88:	35 b1       	in	r19, 0x05	; 5
}
  8a:	82 2f       	mov	r24, r18
  8c:	93 2f       	mov	r25, r19
  8e:	08 95       	ret

00000090 <main>:

int main(void)
{
    PORTA=0x00;
  90:	1b ba       	out	0x1b, r1	; 27
	PORTB=0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	88 bb       	out	0x18, r24	; 24
	ADC_init();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
    unsigned int a;
	while(1)
    {
        a=ADC_read('0');
		if(a>=85)
		PORTB=0x09;
  9a:	c9 e0       	ldi	r28, 0x09	; 9
	PORTB=0xFF;
	ADC_init();
    unsigned int a;
	while(1)
    {
        a=ADC_read('0');
  9c:	80 e3       	ldi	r24, 0x30	; 48
  9e:	0e 94 3b 00 	call	0x76	; 0x76 <ADC_read>
		if(a>=85)
  a2:	85 35       	cpi	r24, 0x55	; 85
  a4:	91 05       	cpc	r25, r1
  a6:	10 f0       	brcs	.+4      	; 0xac <main+0x1c>
		PORTB=0x09;
  a8:	c8 bb       	out	0x18, r28	; 24
  aa:	f8 cf       	rjmp	.-16     	; 0x9c <main+0xc>
		else
		PORTB=0x00;
  ac:	18 ba       	out	0x18, r1	; 24
  ae:	f6 cf       	rjmp	.-20     	; 0x9c <main+0xc>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
