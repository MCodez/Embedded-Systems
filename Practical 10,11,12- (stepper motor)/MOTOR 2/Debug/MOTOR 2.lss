
MOTOR 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001fe  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000009e7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000051f  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d8  00000000  00000000  00000f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025d  00000000  00000000  0000115d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000012f  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000227  00000000  00000000  0000158b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 94 00 	call	0x128	; 0x128 <main>
  7a:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
	cmd1=((abc<<4)&(0xf0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  82:	82 bb       	out	0x12, r24	; 18
	LCD_port&=~(1<<RS);//RS=0 for command
  84:	90 98       	cbi	0x12, 0	; 18
	LCD_port&=~(1<<RW);///rw=0
  86:	91 98       	cbi	0x12, 1	; 18
	LCD_port|=(1<<EN);///
  88:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	83 ec       	ldi	r24, 0xC3	; 195
  8c:	99 e0       	ldi	r25, 0x09	; 9
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmd+0x12>
  94:	00 00       	nop
	_delay_ms(10);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  96:	92 98       	cbi	0x12, 2	; 18
  98:	08 95       	ret

0000009a <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xf0;
	LCD_cmd(cmd1);
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	cmd1=((abc<<4)&(0xf0));
  a6:	20 e1       	ldi	r18, 0x10	; 16
  a8:	c2 9f       	mul	r28, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  ae:	99 27       	eor	r25, r25
  b0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  c0:	88 e2       	ldi	r24, 0x28	; 40
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
  d8:	08 95       	ret

000000da <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  da:	82 bb       	out	0x12, r24	; 18
	LCD_port|=(1<<RS);
  dc:	90 9a       	sbi	0x12, 0	; 18
	LCD_port&=~(1<<RW);
  de:	91 98       	cbi	0x12, 1	; 18
	LCD_port|=(1<<EN);
  e0:	92 9a       	sbi	0x12, 2	; 18
  e2:	83 ec       	ldi	r24, 0xC3	; 195
  e4:	99 e0       	ldi	r25, 0x09	; 9
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_data+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_data+0x12>
  ec:	00 00       	nop
	_delay_ms(10);
	LCD_port&=~(1<<EN);
  ee:	92 98       	cbi	0x12, 2	; 18
  f0:	08 95       	ret

000000f2 <dis_data>:
}

void dis_data(unsigned char abc)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
  fc:	8c 2f       	mov	r24, r28
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_string>:

void LCD_string(unsigned char *str)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!='\0')
 110:	88 81       	ld	r24, Y
 112:	88 23       	and	r24, r24
 114:	31 f0       	breq	.+12     	; 0x122 <LCD_string+0x18>
	LCD_data(data1);
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}

void LCD_string(unsigned char *str)
 116:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!='\0')
	{	dis_data(str[i]);
 118:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
}

void LCD_string(unsigned char *str)
{
	int i;
	while(str[i]!='\0')
 11c:	89 91       	ld	r24, Y+
 11e:	81 11       	cpse	r24, r1
 120:	fb cf       	rjmp	.-10     	; 0x118 <LCD_string+0xe>
	{	dis_data(str[i]);
		i++;
	}

}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <main>:



int main(void)
{
	DDRB=0xFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF;
 12c:	81 bb       	out	0x11, r24	; 17
	int i;
	lcd_init();
 12e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
	while(1)
	{
	LCD_string("CLOCKWISE");
	for(i=0;i<4;i++)
	{
	PORTB=(1<<i);
 132:	c1 e0       	ldi	r28, 0x01	; 1
 134:	02 e0       	ldi	r16, 0x02	; 2
 136:	14 e0       	ldi	r17, 0x04	; 4
 138:	d8 e0       	ldi	r29, 0x08	; 8
	DDRD=0xFF;
	int i;
	lcd_init();
	while(1)
	{
	LCD_string("CLOCKWISE");
 13a:	85 e6       	ldi	r24, 0x65	; 101
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
	for(i=0;i<4;i++)
	{
	PORTB=(1<<i);
 142:	c8 bb       	out	0x18, r28	; 24
 144:	2f e3       	ldi	r18, 0x3F	; 63
 146:	8d e0       	ldi	r24, 0x0D	; 13
 148:	93 e0       	ldi	r25, 0x03	; 3
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x22>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x2c>
 154:	00 00       	nop
 156:	08 bb       	out	0x18, r16	; 24
 158:	2f e3       	ldi	r18, 0x3F	; 63
 15a:	8d e0       	ldi	r24, 0x0D	; 13
 15c:	93 e0       	ldi	r25, 0x03	; 3
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x36>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x40>
 168:	00 00       	nop
 16a:	18 bb       	out	0x18, r17	; 24
 16c:	2f e3       	ldi	r18, 0x3F	; 63
 16e:	8d e0       	ldi	r24, 0x0D	; 13
 170:	93 e0       	ldi	r25, 0x03	; 3
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x4a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x54>
 17c:	00 00       	nop
 17e:	d8 bb       	out	0x18, r29	; 24
 180:	2f e3       	ldi	r18, 0x3F	; 63
 182:	8d e0       	ldi	r24, 0x0D	; 13
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x5e>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x68>
 190:	00 00       	nop
	_delay_ms(1000);	
	}
	dis_cmd(0x1);
 192:	8c 2f       	mov	r24, r28
 194:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("ANTI-CLOCKWISE");
 198:	80 e6       	ldi	r24, 0x60	; 96
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_string>
	PORTB=0x04;
 1a0:	18 bb       	out	0x18, r17	; 24
 1a2:	2f e3       	ldi	r18, 0x3F	; 63
 1a4:	8d e0       	ldi	r24, 0x0D	; 13
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x80>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x8a>
 1b2:	00 00       	nop
	_delay_ms(1000);
	PORTB=0x02;
 1b4:	08 bb       	out	0x18, r16	; 24
 1b6:	2f e3       	ldi	r18, 0x3F	; 63
 1b8:	8d e0       	ldi	r24, 0x0D	; 13
 1ba:	93 e0       	ldi	r25, 0x03	; 3
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x94>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x9e>
 1c6:	00 00       	nop
	_delay_ms(1000);
	PORTB=0x01;
 1c8:	c8 bb       	out	0x18, r28	; 24
 1ca:	2f e3       	ldi	r18, 0x3F	; 63
 1cc:	8d e0       	ldi	r24, 0x0D	; 13
 1ce:	93 e0       	ldi	r25, 0x03	; 3
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xa8>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xb2>
 1da:	00 00       	nop
	_delay_ms(1000);
	PORTB=0x08;
 1dc:	d8 bb       	out	0x18, r29	; 24
 1de:	2f e3       	ldi	r18, 0x3F	; 63
 1e0:	8d e0       	ldi	r24, 0x0D	; 13
 1e2:	93 e0       	ldi	r25, 0x03	; 3
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0xbc>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0xc6>
 1ee:	00 00       	nop
	_delay_ms(1000);
	PORTB=0x00;
 1f0:	18 ba       	out	0x18, r1	; 24
	dis_cmd(0x1);
 1f2:	8c 2f       	mov	r24, r28
 1f4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
 1f8:	a0 cf       	rjmp	.-192    	; 0x13a <main+0x12>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
