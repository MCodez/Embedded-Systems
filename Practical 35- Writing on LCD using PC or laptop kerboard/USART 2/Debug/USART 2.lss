
USART 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000134  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000465  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e3  00000000  00000000  00000e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000254  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015c  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026f  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000016ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_cmd>:
	cmd1=((abc<<4)&(0xf0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  6c:	85 bb       	out	0x15, r24	; 21
	LCD_port&=~(1<<RS);//RS=0 for command
  6e:	a8 98       	cbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);///rw=0
  70:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);///
  72:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	8f e3       	ldi	r24, 0x3F	; 63
  76:	9c e9       	ldi	r25, 0x9C	; 156
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <LCD_cmd+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <LCD_cmd+0x12>
  7e:	00 00       	nop
	_delay_ms(10);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  80:	aa 98       	cbi	0x15, 2	; 21
  82:	08 95       	ret

00000084 <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  84:	cf 93       	push	r28
  86:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xf0;
	LCD_cmd(cmd1);
  88:	80 7f       	andi	r24, 0xF0	; 240
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
	cmd1=((abc<<4)&(0xf0));
  90:	20 e1       	ldi	r18, 0x10	; 16
  92:	c2 9f       	mul	r28, r18
  94:	c0 01       	movw	r24, r0
  96:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  98:	99 27       	eor	r25, r25
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
}
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  aa:	88 e2       	ldi	r24, 0x28	; 40
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
  c2:	08 95       	ret

000000c4 <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  c4:	85 bb       	out	0x15, r24	; 21
	LCD_port|=(1<<RS);
  c6:	a8 9a       	sbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);
  c8:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);
  ca:	aa 9a       	sbi	0x15, 2	; 21
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	9c e9       	ldi	r25, 0x9C	; 156
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_data+0xc>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_data+0x12>
  d6:	00 00       	nop
	_delay_ms(10);
	LCD_port&=~(1<<EN);
  d8:	aa 98       	cbi	0x15, 2	; 21
  da:	08 95       	ret

000000dc <dis_data>:
}

void dis_data(unsigned char abc)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
  e6:	8c 2f       	mov	r24, r28
  e8:	82 95       	swap	r24
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_data>
}
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <usart_init>:

}

void usart_init()
{
	UBRRL=ubrr_value;
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	89 b9       	out	0x09, r24	; 9
	UBRRH=(ubrr_value>>8);
  f8:	8d e0       	ldi	r24, 0x0D	; 13
  fa:	80 bd       	out	0x20, r24	; 32
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  fc:	86 e8       	ldi	r24, 0x86	; 134
  fe:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXEN)|(1<<TXEN);
 100:	88 e1       	ldi	r24, 0x18	; 24
 102:	8a b9       	out	0x0a, r24	; 10
 104:	08 95       	ret

00000106 <usart_rec>:
	UDR=data;
}

unsigned char usart_rec()
{
	while(!(UCSRA&(1<<RXC)));
 106:	5f 9b       	sbis	0x0b, 7	; 11
 108:	fe cf       	rjmp	.-4      	; 0x106 <usart_rec>
	return UDR;
 10a:	8c b1       	in	r24, 0x0c	; 12
}
 10c:	08 95       	ret

0000010e <main>:

}

int main(void)
{
	DDRC=0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 112:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_init>
	usart_init();
 116:	0e 94 7a 00 	call	0xf4	; 0xf4 <usart_init>
	char data;
	dis_cmd(0x1);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	dis_cmd(0x80);
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	0e 94 42 00 	call	0x84	; 0x84 <dis_cmd>
	while(1)
	{
		data=usart_rec();
 126:	0e 94 83 00 	call	0x106	; 0x106 <usart_rec>
		dis_data(data);
 12a:	0e 94 6e 00 	call	0xdc	; 0xdc <dis_data>
 12e:	fb cf       	rjmp	.-10     	; 0x126 <main+0x18>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
