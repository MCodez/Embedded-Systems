
LN35 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002d2  00000346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000abf  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000646  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000242  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028b  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016b  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000399  00000000  00000000  000018e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  7a:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
	cmd1=((abc<<4)&(0xf0));
	LCD_cmd(cmd1);
}
void LCD_cmd(unsigned char abc)
{
	LCD_port=abc;
  82:	85 bb       	out	0x15, r24	; 21
	LCD_port&=~(1<<RS);//RS=0 for command
  84:	a8 98       	cbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);///rw=0
  86:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);///
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e3       	ldi	r24, 0x3F	; 63
  8c:	9c e9       	ldi	r25, 0x9C	; 156
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmd+0x12>
  94:	00 00       	nop
	_delay_ms(10);///delay for high to low pulse
	LCD_port&=~(1<<EN);
  96:	aa 98       	cbi	0x15, 2	; 21
  98:	08 95       	ret

0000009a <dis_cmd>:
	dis_cmd(0x28);//SET 4 BIT 16X2
	dis_cmd(0x06);////ENTRY MODE
	dis_cmd(0x0c);//display on cursor off
}
void dis_cmd(unsigned char abc)
{
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
	char cmd1;
	cmd1=abc&0xf0;
	LCD_cmd(cmd1);
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	cmd1=((abc<<4)&(0xf0));
  a6:	20 e1       	ldi	r18, 0x10	; 16
  a8:	c2 9f       	mul	r28, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
	LCD_cmd(cmd1);
  ae:	99 27       	eor	r25, r25
  b0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <lcd_init>:
#define RW 1
#define EN 2
void lcd_init()
{

	dis_cmd(0x02);//HOME POSITION
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x28);//SET 4 BIT 16X2
  c0:	88 e2       	ldi	r24, 0x28	; 40
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x06);////ENTRY MODE
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0x0c);//display on cursor off
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
  d8:	08 95       	ret

000000da <LCD_data>:
	LCD_port&=~(1<<EN);
}

void LCD_data(unsigned char abc)
{
	LCD_port=abc;
  da:	85 bb       	out	0x15, r24	; 21
	LCD_port|=(1<<RS);
  dc:	a8 9a       	sbi	0x15, 0	; 21
	LCD_port&=~(1<<RW);
  de:	a9 98       	cbi	0x15, 1	; 21
	LCD_port|=(1<<EN);
  e0:	aa 9a       	sbi	0x15, 2	; 21
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9c e9       	ldi	r25, 0x9C	; 156
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_data+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_data+0x12>
  ec:	00 00       	nop
	_delay_ms(10);
	LCD_port&=~(1<<EN);
  ee:	aa 98       	cbi	0x15, 2	; 21
  f0:	08 95       	ret

000000f2 <dis_data>:
}

void dis_data(unsigned char abc)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	char data1;
	data1=abc&0xf0;
	LCD_data(data1);
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
  fc:	8c 2f       	mov	r24, r28
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_number>:
LCD_number(unsigned int num)
{
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	64 97       	sbiw	r28, 0x14	; 20
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	ac 01       	movw	r20, r24
	int N[10],M[10],count=0,i=0,j,num1;
	while(num>0)
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	09 f4       	brne	.+2      	; 0x12e <LCD_number+0x24>
 12c:	3d c0       	rjmp	.+122    	; 0x1a8 <LCD_number+0x9e>
 12e:	fe 01       	movw	r30, r28
 130:	31 96       	adiw	r30, 0x01	; 1
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}
LCD_number(unsigned int num)
{
	int N[10],M[10],count=0,i=0,j,num1;
 132:	e1 2c       	mov	r14, r1
 134:	f1 2c       	mov	r15, r1
	while(num>0)
	{
		num1=num%10;
 136:	9a 01       	movw	r18, r20
 138:	ad ec       	ldi	r26, 0xCD	; 205
 13a:	bc ec       	ldi	r27, 0xCC	; 204
 13c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__umulhisi3>
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	bc 01       	movw	r22, r24
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	9c 01       	movw	r18, r24
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	26 0f       	add	r18, r22
 162:	37 1f       	adc	r19, r23
 164:	42 1b       	sub	r20, r18
 166:	53 0b       	sbc	r21, r19
		N[i]=num1;
 168:	41 93       	st	Z+, r20
 16a:	51 93       	st	Z+, r21
		i++;
		num=num/10;
 16c:	ac 01       	movw	r20, r24
		count++;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	e8 1a       	sub	r14, r24
 172:	f8 0a       	sbc	r15, r24
	LCD_data(data1);
}
LCD_number(unsigned int num)
{
	int N[10],M[10],count=0,i=0,j,num1;
	while(num>0)
 174:	41 15       	cp	r20, r1
 176:	51 05       	cpc	r21, r1
 178:	f1 f6       	brne	.-68     	; 0x136 <LCD_number+0x2c>
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
 17a:	87 01       	movw	r16, r14
 17c:	01 50       	subi	r16, 0x01	; 1
 17e:	11 09       	sbc	r17, r1
 180:	9a f0       	brmi	.+38     	; 0x1a8 <LCD_number+0x9e>
	data1=abc&0xf0;
	LCD_data(data1);
	data1=((abc<<4)&0xf0);
	LCD_data(data1);
}
LCD_number(unsigned int num)
 182:	ee 0c       	add	r14, r14
 184:	ff 1c       	adc	r15, r15
 186:	e1 e0       	ldi	r30, 0x01	; 1
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ec 0f       	add	r30, r28
 18c:	fd 1f       	adc	r31, r29
 18e:	ee 0e       	add	r14, r30
 190:	ff 1e       	adc	r15, r31
 192:	f2 e0       	ldi	r31, 0x02	; 2
 194:	ef 1a       	sub	r14, r31
 196:	f1 08       	sbc	r15, r1
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
 198:	f7 01       	movw	r30, r14
 19a:	80 81       	ld	r24, Z
 19c:	80 5d       	subi	r24, 0xD0	; 208
 19e:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
		i++;
		num=num/10;
		count++;
		
	}
	for(j=0,i=(count-1);j<count,i>=0;j++,i--)
 1a2:	01 50       	subi	r16, 0x01	; 1
 1a4:	11 09       	sbc	r17, r1
 1a6:	a8 f7       	brcc	.-22     	; 0x192 <LCD_number+0x88>
	{
		M[j]=N[i];
		dis_data(M[j]+0x30);
	}
}
 1a8:	64 96       	adiw	r28, 0x14	; 20
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	08 95       	ret

000001c2 <LCD_string>:

void LCD_string(unsigned char *str)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!='\0')
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	31 f0       	breq	.+12     	; 0x1da <LCD_string+0x18>
		M[j]=N[i];
		dis_data(M[j]+0x30);
	}
}

void LCD_string(unsigned char *str)
 1ce:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!='\0')
	{	dis_data(str[i]);
 1d0:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
}

void LCD_string(unsigned char *str)
{
	int i;
	while(str[i]!='\0')
 1d4:	89 91       	ld	r24, Y+
 1d6:	81 11       	cpse	r24, r1
 1d8:	fb cf       	rjmp	.-10     	; 0x1d0 <LCD_string+0xe>
	{	dis_data(str[i]);
		i++;
	}

}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <ADC_init>:

void ADC_init(void)
{
	ADMUX=(1<<REFS0);
 1e0:	80 e4       	ldi	r24, 0x40	; 64
 1e2:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1e4:	87 e8       	ldi	r24, 0x87	; 135
 1e6:	86 b9       	out	0x06, r24	; 6
 1e8:	08 95       	ret

000001ea <ADC_read>:
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
	ADMUX|=ch;
 1ea:	97 b1       	in	r25, 0x07	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int ADC_read(unsigned char ch)
{
	ch=ch&0b00000111;
 1ec:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
 1ee:	98 2b       	or	r25, r24
 1f0:	97 b9       	out	0x07, r25	; 7
	ADCSRA|=(1<<ADSC);
 1f2:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)));
 1f4:	34 9b       	sbis	0x06, 4	; 6
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <ADC_read+0xa>
	ADCSRA|=(1<<ADIF);
 1f8:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
 1fa:	24 b1       	in	r18, 0x04	; 4
 1fc:	35 b1       	in	r19, 0x05	; 5
}
 1fe:	82 2f       	mov	r24, r18
 200:	93 2f       	mov	r25, r19
 202:	08 95       	ret

00000204 <LCD_cust_char>:
LCD_cust_char()
{
	dis_cmd(0x40);
 204:	80 e4       	ldi	r24, 0x40	; 64
 206:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_data(0x1C);
 20a:	8c e1       	ldi	r24, 0x1C	; 28
 20c:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
	dis_data(0x1C);
 210:	8c e1       	ldi	r24, 0x1C	; 28
 212:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
	dis_data(0x1C);
 216:	8c e1       	ldi	r24, 0x1C	; 28
 218:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
	dis_data(0x00);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
	dis_data(0x00);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
	dis_data(0x00);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
	dis_data(0x00);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
	dis_data(0x00);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
	
}
 23a:	08 95       	ret

0000023c <main>:

int main(void)
{
	DDRA=0x00;
 23c:	1a ba       	out	0x1a, r1	; 26
	DDRC=0xFF;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 242:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
	ADC_init();
 246:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ADC_init>
	LCD_cust_char();
 24a:	0e 94 02 01 	call	0x204	; 0x204 <LCD_cust_char>
	unsigned int a,b;
	dis_cmd(0x80);
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("Dig. Thermometer");
 254:	80 e6       	ldi	r24, 0x60	; 96
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
	dis_cmd(0xC2);
 25c:	82 ec       	ldi	r24, 0xC2	; 194
 25e:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_data(0x00);	
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 79 00 	call	0xf2	; 0xf2 <dis_data>
	dis_cmd(0xC3);
 268:	83 ec       	ldi	r24, 0xC3	; 195
 26a:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	LCD_string("C");
 26e:	81 e7       	ldi	r24, 0x71	; 113
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_string>
	while(1)
	{
		a=ADC_read('0');
		b=(a*350)/1024;
 276:	0e e5       	ldi	r16, 0x5E	; 94
 278:	11 e0       	ldi	r17, 0x01	; 1
	dis_data(0x00);	
	dis_cmd(0xC3);
	LCD_string("C");
	while(1)
	{
		a=ADC_read('0');
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ADC_read>
 280:	ec 01       	movw	r28, r24
		b=(a*350)/1024;
		dis_cmd(0xC0);
 282:	80 ec       	ldi	r24, 0xC0	; 192
 284:	0e 94 4d 00 	call	0x9a	; 0x9a <dis_cmd>
	dis_cmd(0xC3);
	LCD_string("C");
	while(1)
	{
		a=ADC_read('0');
		b=(a*350)/1024;
 288:	c0 9f       	mul	r28, r16
 28a:	c0 01       	movw	r24, r0
 28c:	c1 9f       	mul	r28, r17
 28e:	90 0d       	add	r25, r0
 290:	d0 9f       	mul	r29, r16
 292:	90 0d       	add	r25, r0
 294:	11 24       	eor	r1, r1
		dis_cmd(0xC0);
		LCD_number(b);
 296:	89 2f       	mov	r24, r25
 298:	86 95       	lsr	r24
 29a:	86 95       	lsr	r24
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_number>
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	83 ed       	ldi	r24, 0xD3	; 211
 2a6:	90 e3       	ldi	r25, 0x30	; 48
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x6c>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x76>
 2b2:	00 00       	nop
 2b4:	e2 cf       	rjmp	.-60     	; 0x27a <main+0x3e>

000002b6 <__umulhisi3>:
 2b6:	a2 9f       	mul	r26, r18
 2b8:	b0 01       	movw	r22, r0
 2ba:	b3 9f       	mul	r27, r19
 2bc:	c0 01       	movw	r24, r0
 2be:	a3 9f       	mul	r26, r19
 2c0:	01 d0       	rcall	.+2      	; 0x2c4 <__umulhisi3+0xe>
 2c2:	b2 9f       	mul	r27, r18
 2c4:	70 0d       	add	r23, r0
 2c6:	81 1d       	adc	r24, r1
 2c8:	11 24       	eor	r1, r1
 2ca:	91 1d       	adc	r25, r1
 2cc:	08 95       	ret

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
